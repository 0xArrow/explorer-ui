{"version":3,"file":"10.806662722e3b5374da54.bundle.js","sources":["webpack:///./node_modules/@alethio/ui/lib/control/grid/state/GridFields.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridLayout.js","webpack:///./node_modules/@alethio/ui/lib/icon/AddIcon.js","webpack:///./node_modules/@alethio/ui/lib/control/internal/ToggleInput.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/header/GridHeader.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridRow.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/header/GridHeaderItem.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridWrapper.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridData.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/Grid.js","webpack:///./node_modules/@alethio/ui/lib/data/Hash.js","webpack:///./node_modules/@alethio/ui/lib/data/Label.js","webpack:///./node_modules/@alethio/ui/lib/control/IconButton.js"],"sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { observable, computed, action } from \"mobx\";\r\nexport class GridFields {\r\n    get gridFields() {\r\n        return this.fields;\r\n    }\r\n    get selectedGridFields() {\r\n        return this.fields.filter(f => f.selected);\r\n    }\r\n    setColumnSelect(key, select) {\r\n        const field = this.fields.find((f) => {\r\n            return key === f.fieldKey;\r\n        });\r\n        if (field) {\r\n            field.selected = select;\r\n        }\r\n    }\r\n    get defaultSortedField() {\r\n        return void 0;\r\n    }\r\n}\r\n__decorate([\r\n    observable\r\n], GridFields.prototype, \"fields\", void 0);\r\n__decorate([\r\n    computed\r\n], GridFields.prototype, \"gridFields\", null);\r\n__decorate([\r\n    computed\r\n], GridFields.prototype, \"selectedGridFields\", null);\r\n__decorate([\r\n    action\r\n], GridFields.prototype, \"setColumnSelect\", null);\r\n//# sourceMappingURL=GridFields.js.map","import styled from \"../../../styled-components\";\r\nexport const GridLayout = styled(\"div\").withConfig({ displayName: \"GridLayout\", componentId: \"sc-aptxge\" }) `\n    overflow-x: auto;\n    display: grid;\n    grid-template-columns: auto ${({ numberOfFields }) => {\r\n    if (numberOfFields === 0) {\r\n        return \"\";\r\n    }\r\n    if (numberOfFields === 1) {\r\n        return \"max-content\";\r\n    }\r\n    const repeatTimes = numberOfFields - 1;\r\n    return \"repeat( \" + repeatTimes + \", max-content 1px) max-content\";\r\n}} auto;\n    font-size: 14px;\n    font-weight: 500;\n    letter-spacing: .2px;\n`;\r\n//# sourceMappingURL=GridLayout.js.map","import * as React from \"react\";\r\nimport { SvgIcon } from \"../util/react/SvgIcon\";\r\nexport class AddIcon extends React.Component {\r\n    render() {\r\n        return (React.createElement(SvgIcon, Object.assign({}, this.props),\r\n            React.createElement(\"g\", { stroke: \"none\", strokeWidth: \"1\", fill: \"none\", fillRule: \"evenodd\" },\r\n                React.createElement(\"polygon\", { points: \"0 0 24 0 24 24 0 24\" }),\r\n                React.createElement(\"path\", { d: \"M19,3 L5,3 C3.89,3 3,3.9 3,5 L3,19 C3,20.1 3.89,21 5,21 L19,21 \" +\r\n                        \"C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 Z \" +\r\n                        \"M17,13 L13,13 L13,17 L11,17 L11,13 L7,13 L7,11 \" +\r\n                        \"L11,11 L11,7 L13,7 L13,11 L17,11 L17,13 Z\", fill: \"currentColor\", fillRule: \"nonzero\" }))));\r\n    }\r\n}\r\n//# sourceMappingURL=AddIcon.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nconst StyledInput = styled.input.withConfig({ displayName: \"StyledInput\", componentId: \"sc-yey14m\" }) `\n    pointer-events: none;\n    opacity: 0;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n`;\r\nconst ToggleInputWrapper = styled.div.withConfig({ displayName: \"ToggleInputWrapper\", componentId: \"sc-15nef3q\" }) `\n    padding: 4px 0 4px 24px;\n    min-height: 24px;\n    box-sizing: border-box;\n    position: relative;\n`;\r\nconst ToggleInputLabel = styled.label.withConfig({ displayName: \"ToggleInputLabel\", componentId: \"sc-swbdu1\" }) `\n    display: block;\n    font-size: 14px;\n    font-weight: 400;\n    color: ${({ theme, disabled }) => disabled ? theme.colors.base.disabled : theme.colors.base.primary.color};\n`;\r\nconst ToggleInputLabelText = styled.div.withConfig({ displayName: \"ToggleInputLabelText\", componentId: \"sc-13s0bxy\" }) `\n    margin-left: 4px;\n`;\r\nconst ToggleInputIconWrapper = styled.div.withConfig({ displayName: \"ToggleInputIconWrapper\", componentId: \"sc-1wd0gtq\" }) `\n    position: absolute;\n    top: 0;\n    left: 0;\n    color: ${({ theme, disabled, checked }) => disabled ? theme.colors.base.disabled : checked\r\n    ? theme.colors.base.accent.color : theme.colors.base.primary.color};\n`;\r\nexport class ToggleInput extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onChange = (event) => {\r\n            if (this.props.onChange && !this.props.disabled) {\r\n                this.props.onChange(event, this.props.type === \"radio\" || !this.props.checked, this.props.name, this.props.value);\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        let { id, type, name, value, required, disabled, checked, Icon, children } = this.props;\r\n        return (React.createElement(ToggleInputWrapper, null,\r\n            React.createElement(ToggleInputLabel, { disabled: disabled, checked: checked || false },\r\n                React.createElement(ToggleInputIconWrapper, { disabled: disabled, checked: checked || false },\r\n                    React.createElement(StyledInput, { type: type, id: id, name: name, value: value, checked: checked || false, required: required, disabled: disabled, onChange: this.onChange }),\r\n                    Icon(checked || false)),\r\n                children && React.createElement(ToggleInputLabelText, null, children))));\r\n    }\r\n}\r\n//# sourceMappingURL=ToggleInput.js.map","import * as React from \"react\";\r\nimport styled from \"../../../../styled-components\";\r\nimport { GridColumnSelector } from \"./GridColumnSelector\";\r\nconst HeaderSpacer = styled.div.withConfig({ displayName: \"HeaderSpacer\", componentId: \"sc-10aqbav\" }) `\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\n    background-color: ${props => props.theme.colors.gridEvenRowBg};\n    display: flex;\n`;\r\nconst HeaderSpacerLeft = styled(HeaderSpacer).withConfig({ displayName: \"HeaderSpacerLeft\", componentId: \"sc-x5n45g\" }) ``;\r\nconst HeaderSpacerRight = styled(HeaderSpacer).withConfig({ displayName: \"HeaderSpacerRight\", componentId: \"sc-ldb37k\" }) `\n    justify-content: flex-end;\n`;\r\nconst HeaderVertBorder = styled.div.withConfig({ displayName: \"HeaderVertBorder\", componentId: \"sc-k77cvl\" }) `\n    background-color: ${props => props.theme.colors.gridBorder};\n    height: 100%;\n    align-self: end;\n`;\r\nexport class GridHeader extends React.PureComponent {\r\n    render() {\r\n        const propsChildren = React.Children.toArray(this.props.children);\r\n        const resultChildren = propsChildren.reduce((acc, c, i) => {\r\n            acc.push(React.createElement(\"span\", { key: -i - 1 }, c));\r\n            if (i !== propsChildren.length - 1) {\r\n                acc.push(React.createElement(HeaderVertBorder, { key: i + 1 }));\r\n            }\r\n            return acc;\r\n        }, [\r\n            React.createElement(HeaderSpacerLeft, { key: 0 },\r\n                React.createElement(GridColumnSelector, { onChange: (field) => {\r\n                        this.props.onFieldsChange(field);\r\n                    }, fields: this.props.fields }),\r\n                this.props.extraElements && this.props.extraElements.left)\r\n        ]);\r\n        resultChildren.push(React.createElement(HeaderSpacerRight, { key: propsChildren.length + 1 }, this.props.extraElements && this.props.extraElements.right));\r\n        return resultChildren;\r\n    }\r\n}\r\n//# sourceMappingURL=GridHeader.js.map","import * as React from \"react\";\r\nimport styled from \"../../../styled-components\";\r\nconst GRID_CELL_PADDING_X = 32;\r\nconst GRID_CELL_PADDING_Y = 8;\r\nconst Spacer = styled(\"div\").withConfig({ displayName: \"Spacer\", componentId: \"sc-rbtu2a\" }) `\n    background-color: ${({ odd, theme }) => odd ? theme.colors.gridOddRowBg : theme.colors.gridEvenRowBg};\n`;\r\nconst Item = styled(\"div\").withConfig({ displayName: \"Item\", componentId: \"sc-533s6z\" }) `\n    padding: ${GRID_CELL_PADDING_Y}px ${GRID_CELL_PADDING_X}px;\n    background-color: ${({ odd, theme }) => odd ? theme.colors.gridOddRowBg : theme.colors.gridEvenRowBg};\n`;\r\nconst VertBorder = styled.div.withConfig({ displayName: \"VertBorder\", componentId: \"sc-1gjw8rh\" }) `\n    background-color: ${props => props.theme.colors.gridBorder};\n`;\r\nexport class GridRow extends React.PureComponent {\r\n    render() {\r\n        const propsChildren = React.Children.toArray(this.props.children);\r\n        const resultChildren = propsChildren.reduce((acc, c, i) => {\r\n            acc.push(React.createElement(Item, { odd: this.props.odd, key: -i - 1 }, c));\r\n            if (i !== propsChildren.length - 1) {\r\n                acc.push(React.createElement(VertBorder, { key: i + 1 }));\r\n            }\r\n            return acc;\r\n        }, [\r\n            React.createElement(Spacer, { odd: this.props.odd, key: 0 })\r\n        ]);\r\n        resultChildren.push(React.createElement(Spacer, { odd: this.props.odd, key: propsChildren.length + 1 }));\r\n        return resultChildren;\r\n    }\r\n}\r\n//# sourceMappingURL=GridRow.js.map","import { __decorate } from \"tslib\";\r\nimport * as React from \"react\";\r\nimport styled, { css } from \"../../../../styled-components\";\r\nimport { Label } from \"../../../../data/Label\";\r\nimport { GridSortingOrder } from \"../../state/GridSortingOrder\";\r\nimport { observer } from \"mobx-react\";\r\nconst GridHeaderHitBox = styled.div.withConfig({ displayName: \"GridHeaderHitBox\", componentId: \"sc-1b5w8mr\" }) `\n`;\r\nconst HeaderItem = styled(\"div\").withConfig({ displayName: \"HeaderItem\", componentId: \"sc-1xk67nx\" }) `\n    background: ${props => props.theme.colors.gridEvenRowBg};\n    padding: 10px 8px 10px 32px;\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\n    cursor: ${props => props.isSortable ? \"pointer\" : \"default\"};\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    ${props => props.isSortable ? css `\n        & ${Label} {\n            padding: 0;\n            ${GridHeaderHitBox}:hover & {\n                color: ${props.theme.colors.gridHeaderHover};\n            }\n        }\n    ` : css `\n        & ${Label} {\n            padding: 0;\n        }\n    `}\n`;\r\nconst ArrowDown = styled.div.withConfig({ displayName: \"ArrowDown\", componentId: \"sc-1h5wflz\" }) `\n    border-top: 5px solid ${props => props.theme.colors.selectBoxArrow};\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    margin: 0 7px;\n    ${GridHeaderHitBox}:hover & {\n        border-top-color: ${props => props.theme.colors.gridHeaderHover};;\n    }\n`;\r\nconst ArrowUp = styled.div.withConfig({ displayName: \"ArrowUp\", componentId: \"sc-7i1cva\" }) `\n    border-bottom: 5px solid ${props => props.theme.colors.selectBoxArrow};\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    margin: 0 7px;\n    ${GridHeaderHitBox}:hover & {\n        border-bottom-color: ${props => props.theme.colors.gridHeaderHover};;\n    }\n`;\r\nconst NoArrow = styled.div.withConfig({ displayName: \"NoArrow\", componentId: \"sc-bp2nzo\" }) `\n    width: 24px;\n`;\r\nlet GridHeaderItem = class GridHeaderItem extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onClick = () => {\r\n            if (this.props.onClick) {\r\n                this.props.onClick(this.props.field);\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return (React.createElement(GridHeaderHitBox, null,\r\n            React.createElement(HeaderItem, { onClick: this.onClick, isSortable: this.props.field.isSortable },\r\n                React.createElement(Label, null, this.props.children),\r\n                this.getHeaderSortArrow())));\r\n    }\r\n    getHeaderSortArrow() {\r\n        if (!this.props.sortingOptions || this.props.sortingOptions.field !== this.props.field) {\r\n            return React.createElement(NoArrow, null);\r\n        }\r\n        if (this.props.sortingOptions.order === GridSortingOrder.Ascending) {\r\n            return React.createElement(ArrowUp, null);\r\n        }\r\n        if (this.props.sortingOptions.order === GridSortingOrder.Descending) {\r\n            return React.createElement(ArrowDown, null);\r\n        }\r\n        return React.createElement(NoArrow, null);\r\n    }\r\n};\r\nGridHeaderItem = __decorate([\r\n    observer\r\n], GridHeaderItem);\r\nexport { GridHeaderItem };\r\n//# sourceMappingURL=GridHeaderItem.js.map","import * as React from \"react\";\r\nimport styled from \"../../../styled-components\";\r\nconst Wrapper = styled.div.withConfig({ displayName: \"Wrapper\", componentId: \"sc-wfj9sf\" }) `\n    border-top: 1px solid ${props => props.theme.colors.gridBorder};\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\n`;\r\nexport const GridWrapper = ({ children }) => (React.createElement(Wrapper, null, children));\r\n//# sourceMappingURL=GridWrapper.js.map","import styled from \"../../../styled-components\";\r\nexport const GridData = styled(\"div\").withConfig({ displayName: \"GridData\", componentId: \"sc-nc0gfp\" }) `\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: ${({ dataType }) => dataType === \"number\" ? \"flex-end\" : \"auto\"};\n`;\r\n//# sourceMappingURL=GridData.js.map","import { __decorate } from \"tslib\";\r\nimport * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable } from \"mobx\";\r\nimport { GridLayout } from \"./internal/GridLayout\";\r\nimport { GridSortingOrder } from \"./state/GridSortingOrder\";\r\nimport { GridHeader } from \"./internal/header/GridHeader\";\r\nimport { GridRow } from \"./internal/GridRow\";\r\nimport { GridHeaderItem } from \"./internal/header/GridHeaderItem\";\r\nimport { GridWrapper } from \"./internal/GridWrapper\";\r\nimport { GridData } from \"./internal/GridData\";\r\nconst LoadMoreRows = styled.div.withConfig({ displayName: \"LoadMoreRows\", componentId: \"sc-t370f6\" }) `\n    text-align: center;\n    font-size: 14px;\n    font-weight: 500;\n    padding: 8px;\n    cursor: pointer;\n`;\r\nconst NoRowsAvailable = styled.div.withConfig({ displayName: \"NoRowsAvailable\", componentId: \"sc-1ngfcy9\" }) `\n    text-align: center;\n    font-size: 14px;\n    font-weight: 500;\n    padding: 8px;\n`;\r\nlet Grid = class Grid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.dataItemRenderer = (f, row) => {\r\n            if (f.renderer) {\r\n                return (React.createElement(GridData, { key: f.fieldKey, dataType: f.type }, typeof f.renderer === \"function\" ?\r\n                    f.renderer(row.data) :\r\n                    f.renderer.render(row.data)));\r\n            }\r\n            let data = f.getFieldValue(row.data).toString();\r\n            return (React.createElement(GridData, { key: f.fieldKey, dataType: f.type }, data));\r\n        };\r\n        this.changeSorting = (field) => {\r\n            if (this.props.sortingOptions.field !== field) {\r\n                this.props.sortingOptions.setAscendingOrder();\r\n            }\r\n            else {\r\n                this.props.sortingOptions.setNextOrder();\r\n            }\r\n            if (field !== undefined) {\r\n                this.props.sortingOptions.field = field;\r\n            }\r\n        };\r\n        this.setColumnSelect = (field) => {\r\n            this.props.fields.setColumnSelect(field.fieldKey, !field.selected);\r\n        };\r\n        this.loadMoreRows = () => {\r\n            if (this.visibleRows < this.props.rows.length) {\r\n                this.visibleRows += 50;\r\n            }\r\n        };\r\n        this.updateVisibleRows();\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.limitRows !== prevProps.limitRows || this.props.maxVisibleRows !== prevProps.maxVisibleRows) {\r\n            this.updateVisibleRows();\r\n        }\r\n    }\r\n    updateVisibleRows() {\r\n        this.visibleRows = this.props.limitRows ? this.props.maxVisibleRows : Number.POSITIVE_INFINITY;\r\n    }\r\n    render() {\r\n        const sortedRows = this.getSortedRows();\r\n        return (React.createElement(React.Fragment, null,\r\n            React.createElement(GridWrapper, null,\r\n                React.createElement(GridLayout, { numberOfFields: this.props.fields.selectedGridFields.length },\r\n                    React.createElement(GridHeader, { onFieldsChange: this.setColumnSelect, fields: this.props.fields.gridFields, extraElements: this.props.extraHeaderElements }, this.props.fields.selectedGridFields.map(f => {\r\n                        return (React.createElement(GridHeaderItem, { key: f.fieldKey, field: f, onClick: f.isSortable ? this.changeSorting : undefined, sortingOptions: this.props.sortingOptions }, f.label));\r\n                    })),\r\n                    sortedRows.slice(0, this.visibleRows).map((row, idx) => {\r\n                        return (React.createElement(GridRow, { odd: !(idx % 2), key: row.key }, this.props.fields.selectedGridFields.map((f) => {\r\n                            return this.dataItemRenderer(f, row);\r\n                        })));\r\n                    }))),\r\n            this.visibleRows < this.props.rows.length ?\r\n                React.createElement(LoadMoreRows, { onClick: this.loadMoreRows }, this.props.loadMoreText)\r\n                : null,\r\n            this.props.rows.length === 0 ?\r\n                React.createElement(NoRowsAvailable, null, this.props.noDataText)\r\n                : null));\r\n    }\r\n    getSortedRows() {\r\n        const sortOpts = this.props.sortingOptions;\r\n        if (sortOpts.field === undefined ||\r\n            sortOpts.order === GridSortingOrder.Default) {\r\n            return this.props.rows;\r\n        }\r\n        return [...this.props.rows].sort((a, b) => {\r\n            if (sortOpts.field === undefined ||\r\n                sortOpts.order === GridSortingOrder.Default) {\r\n                return -1;\r\n            }\r\n            const aValue = sortOpts.field.getFieldValue(a.data);\r\n            const bValue = sortOpts.field.getFieldValue(b.data);\r\n            const compResult = typeof aValue !== \"string\" && typeof aValue !== \"number\" ?\r\n                aValue.comparedTo(bValue) :\r\n                this.defaultComparator(aValue, bValue);\r\n            if (sortOpts.order === GridSortingOrder.Ascending) {\r\n                return compResult;\r\n            }\r\n            else {\r\n                return compResult * -1;\r\n            }\r\n        });\r\n    }\r\n    defaultComparator(a, b) {\r\n        if (a === b) {\r\n            return 0;\r\n        }\r\n        if (a < b) {\r\n            return -1;\r\n        }\r\n        return 1;\r\n    }\r\n};\r\nGrid.defaultProps = {\r\n    maxVisibleRows: 50,\r\n    limitRows: true\r\n};\r\n__decorate([\r\n    observable\r\n], Grid.prototype, \"visibleRows\", void 0);\r\nGrid = __decorate([\r\n    observer\r\n], Grid);\r\nexport { Grid };\r\n//# sourceMappingURL=Grid.js.map","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { splitLongHash } from \"../util/internal/hash\";\r\nconst HiddenHashPartWrapper = styled.span.withConfig({ displayName: \"HiddenHashPartWrapper\", componentId: \"sc-1cvzrqx\" }) `\n    &:before {\n        content: \" ... \";\n    }\n`;\r\nconst HiddenHashPart = styled.strong.withConfig({ displayName: \"HiddenHashPart\", componentId: \"sc-1nxisa2\" }) `\n    display: inline-block;\n    width: 0;\n    height: 0;\n    opacity: 0;\n    pointer-events: none;\n    font-size: 0;\n`;\r\nexport class Hash extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleCopy = (e) => {\r\n            e.preventDefault();\r\n            e.clipboardData.setData(\"text/plain\", \"0x\" + this.props.children);\r\n        };\r\n    }\r\n    render() {\r\n        let { children } = this.props;\r\n        let hash = \"0x\" + children.replace(/^0x/, \"\");\r\n        let chars = this.props.ellipsisChars;\r\n        let hashParts = splitLongHash(hash, this.props.ellipsisThreshold, chars);\r\n        return React.createElement(\"span\", { onCopy: this.handleCopy }, !this.props.useEllipsis || !hashParts ?\r\n            hash :\r\n            React.createElement(React.Fragment, null,\r\n                hashParts[0],\r\n                React.createElement(HiddenHashPartWrapper, null,\r\n                    React.createElement(HiddenHashPart, null, hashParts[1])),\r\n                hashParts[2]));\r\n    }\r\n}\r\nHash.defaultProps = {\r\n    ellipsisThreshold: 20,\r\n    ellipsisChars: 6,\r\n    useEllipsis: true\r\n};\r\n//# sourceMappingURL=Hash.js.map","import styled, { css } from \"../styled-components\";\r\nimport * as React from \"react\";\r\nconst $Label = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nexport const Label = styled($Label).withConfig({ displayName: \"Label\", componentId: \"sc-1obk20v\" }) `\n    font-size: 12px;\n    line-height: 12px;\n    height: 12px;\n    text-transform: ${props => props.uppercase ? \"uppercase\" : \"none\"};\n    background-color: ${props => (props.arrow ?\r\n    (props.disabled ? props.theme.colors.label.disabled : props.theme.colors.base.highlight.color) :\r\n    \"transparent\")};\n    font-weight: 600;\n    letter-spacing: .5px;\n    padding: 4px 8px;\n    margin-right: ${props => props.arrow ? \"10px\" : \"0\"};\n    color: ${props => (props.arrow ?\r\n    props.theme.colors.base.highlight.contrast :\r\n    props.strong ?\r\n        (props.disabled ? props.theme.colors.label.disabled : props.theme.colors.label.strong) :\r\n        props.disabled ? props.theme.colors.label.disabled : props.theme.colors.label.default)};\n\n    /**\n     * When is the first label in a row the width of the container (LayoutRowItemWrapper) is 200px + 2*8px padding,\n     * and the display: flex along with justify-content: flex-end ensures that the label is right aligned.\n     * However, if the label is long enough (bigger than 200px) to wrap, the Label div will occupy all the container\n     * width, and the text will be aligned to right thanks to the rule below.\n     */\n    text-align: right;\n\n    ${props => props.arrow ? css `\n    position: relative;\n    &::before {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        right: -10px;\n        border-top: 10px solid transparent;\n        border-bottom: 10px solid transparent;\n        border-left: 10px solid ${props.disabled ?\r\n    props.theme.colors.label.disabled :\r\n    props.theme.colors.base.highlight.color};\n        transform: scaleX(.8);\n        transform-origin: center left;\n    }\n    ` : \"\"}\n`;\r\nLabel.defaultProps = {\r\n    uppercase: true\r\n};\r\n//# sourceMappingURL=Label.js.map","import * as React from \"react\";\r\nimport styled, { withTheme } from \"../styled-components\";\r\nconst IconButtonRoot = styled(\"button\").withConfig({ displayName: \"IconButtonRoot\", componentId: \"sc-99n0e5\" }) `\n    display: block;\n    background-color: transparent;\n    border: none; /* Remove borders */\n    color: ${({ buttonColor, theme }) => buttonColor};\n    cursor: pointer;\n    outline: none;\n    padding: 0px;\n`;\r\nclass $IconButton extends React.Component {\r\n    render() {\r\n        let Icon = this.props.Icon;\r\n        let theme = this.props.theme;\r\n        let iconSize = this.props.iconSize;\r\n        let color = typeof this.props.color === \"function\" ? this.props.color(theme) : this.props.color;\r\n        return (React.createElement(IconButtonRoot, { onClick: this.props.onClick, className: this.props.className, buttonColor: color },\r\n            React.createElement(Icon, { color: color, size: iconSize })));\r\n    }\r\n}\r\nexport const IconButton = withTheme($IconButton);\r\n//# sourceMappingURL=IconButton.js.map"],"mappings":"AAAA;;;ACIA;;;;ACFA;;;;;;;ACQA;;;;;AAMA;;;;AAIA;AAEA;;AAGA;;;;AAIA;AAGA;AC5BA;AACA;;AAGA;;AAIA;AACA;;;AAIA;ACZA;AAEA;AAJA;AAMA;AAEA;AACA;AAEA;ACNA;AACA;;AAEA;AACA;;;;;AAKA;AACA;;AAEA;AACA;;;AAGA;AACA;;;;AAKA;AACA;;;;AAIA;AACA;;AAGA;AACA;;;;AAIA;AACA;;AAGA;;AAGA;AChDA;AACA;AAEA;;;;ACDA;ACLA;;;;;;AAmBA;;;;;AAMA;;;;ACjBA;;;;;;;AAQA;;;;ACTA;AACA;;;;AAMA;AACA;AACA;;;;;;;;;AAaA;;;;;;;;;AASA;;;;AAMA;AAEA;;;;ACxCA;;;;AAeA","sourceRoot":""}