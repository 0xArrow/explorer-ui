{"version":3,"file":"7.825b6f889a02269dca29.bundle.js","sources":["webpack:///./node_modules/@alethio/ui/lib/data/ByteSize.js","webpack:///./node_modules/@alethio/ui/lib/overlay/tooltip/TooltipText.js","webpack:///./node_modules/@alethio/ui/lib/overlay/tooltip/Tooltip.js","webpack:///./node_modules/@alethio/ui/lib/data/CopyValueTooltip.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/internal/LayoutRowWrapper.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/LayoutRow.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/LayoutBoxItem.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/LayoutRowItem.js","webpack:///./node_modules/@alethio/ui/lib/layout/Spacer.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/LayoutSection.js","webpack:///./node_modules/@alethio/ui/lib/data/Hash.js","webpack:///./node_modules/@alethio/ui/lib/data/Label.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/box/Box.js","webpack:///./node_modules/@alethio/ui/lib/overlay/tooltip/TooltipBase.js","webpack:///./node_modules/@alethio/ui/lib/control/IconButton.js"],"sourcesContent":["import * as React from \"react\";\r\nimport { NumberFormatter } from \"../util/internal/locale/NumberFormatter\";\r\nexport class ByteSize extends React.Component {\r\n    render() {\r\n        return (this.props.format.replace(/%d/, new NumberFormatter().format(this.props.children, this.props.locale)));\r\n    }\r\n}\r\n//# sourceMappingURL=ByteSize.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nconst TooltipTextRoot = styled(\"div\").withConfig({ displayName: \"TooltipTextRoot\", componentId: \"sc-8p2egb\" }) `\r\n    font-size: 16px;\r\n    line-height: 32px;\r\n    font-weight: 500;\r\n    letter-spacing: normal;\r\n\r\n    color: ${props => (props.textColor ?\r\n    props.textColor :\r\n    \"black\")};\r\n`;\r\nexport class TooltipText extends React.Component {\r\n    render() {\r\n        return React.createElement(TooltipTextRoot, { textColor: this.props.textColor }, this.props.children);\r\n    }\r\n}\r\n//# sourceMappingURL=TooltipText.js.map","import { __rest } from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { TooltipBase } from \"./TooltipBase\";\r\nimport styled from \"../../styled-components\";\r\nimport { TooltipText } from \"./TooltipText\";\r\nconst TooltipContent = styled.div.withConfig({ displayName: \"TooltipContent\", componentId: \"sc-1f742ek\" }) `\r\n    padding: 4px 16px;\r\n`;\r\nexport class Tooltip extends React.Component {\r\n    render() {\r\n        let _a = this.props, { content, children } = _a, other = __rest(_a, [\"content\", \"children\"]);\r\n        return (React.createElement(TooltipBase, Object.assign({}, other, { content: React.createElement(TooltipContent, null,\r\n                React.createElement(TooltipText, null, content)) }), children));\r\n    }\r\n}\r\nTooltip.defaultProps = {\r\n    offset: 8\r\n};\r\n//# sourceMappingURL=Tooltip.js.map","import * as React from \"react\";\r\nimport { Tooltip } from \"../overlay/tooltip/Tooltip\";\r\nimport styled from \"../styled-components\";\r\nimport { CopyValueButton } from \"../control/button/CopyValueButton\";\r\nconst CopyValueButtonWrapper = styled.div.withConfig({ displayName: \"CopyValueButtonWrapper\", componentId: \"sc-qlm5zc\" }) `\r\n    margin: 0 0 0 16px;\r\n`;\r\nexport class CopyValueTooltip extends React.Component {\r\n    render() {\r\n        return (React.createElement(Tooltip, { content: React.createElement(\"div\", { style: { display: \"flex\", alignItems: \"center\" } },\r\n                React.createElement(\"div\", null, this.props.value),\r\n                React.createElement(CopyValueButtonWrapper, null,\r\n                    React.createElement(CopyValueButton, { value: this.props.value, clipboard: this.props.clipboard }))) }, this.props.children));\r\n    }\r\n}\r\n//# sourceMappingURL=CopyValueTooltip.js.map","import styled, { css } from \"../../../styled-components\";\r\nimport * as React from \"react\";\r\nclass $LayoutRowWrapper extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.divWidth = 0;\r\n        this.onResize = () => {\r\n            if (this.props.onResize) {\r\n                this.props.onResize(this.divWidth);\r\n            }\r\n        };\r\n        this.handleResize = () => {\r\n            if (this.divElement) {\r\n                this.divWidth = this.divElement.clientWidth;\r\n                this.onResize();\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return (React.createElement(\"div\", { className: this.props.className, ref: r => { this.divElement = r; } }, this.props.children));\r\n    }\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.handleResize);\r\n        this.handleResize();\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.handleResize);\r\n    }\r\n}\r\nexport const LayoutRowWrapper = styled($LayoutRowWrapper).withConfig({ displayName: \"LayoutRowWrapper\", componentId: \"sc-kwnwhl\" }) `\r\n    display: ${({ smallScreen }) => smallScreen ? \"block\" : \"flex\"};\r\n    ${({ centerContent }) => centerContent ? css `\r\n        justify-content: center;\r\n    ` : \"\"};\r\n`;\r\n//# sourceMappingURL=LayoutRowWrapper.js.map","import { __decorate } from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { LayoutRowWrapper } from \"./internal/LayoutRowWrapper\";\r\nimport { observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nlet LayoutRow = class LayoutRow extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.smallScreen = false;\r\n        this.isFirstLabelIgnored = false;\r\n        this.onResize = (width) => {\r\n            this.smallScreen = this.props.minWidth ?\r\n                width <= this.props.minWidth :\r\n                false;\r\n            if (!this.props.responsive || !this.props.responsive.ignoreFirstLabel) {\r\n                return;\r\n            }\r\n            this.isFirstLabelIgnored = (this.props.responsive.ignoreFirstLabel === \"forLowRes\" && width < 540)\r\n                || (this.props.responsive.ignoreFirstLabel === \"forMobile\" && width < 460);\r\n        };\r\n    }\r\n    isLayoutRowItemInstance(c) {\r\n        let childIsLayoutRowItem = false;\r\n        try {\r\n            const childType = c.type;\r\n            childIsLayoutRowItem = childType._brand === \"layoutRowItem\";\r\n        }\r\n        catch (e) {\r\n        }\r\n        return childIsLayoutRowItem;\r\n    }\r\n    render() {\r\n        let i = 0;\r\n        if (this.smallScreen) {\r\n            return React.Children.map(this.props.children, c => {\r\n                if (c === null || c === void 0) {\r\n                    return c;\r\n                }\r\n                const childIsLayoutRowItem = this.isLayoutRowItemInstance(c);\r\n                return (React.createElement(LayoutRowWrapper, { smallScreen: this.smallScreen, onResize: this.onResize, centerContent: this.isFirstLabelIgnored }, childIsLayoutRowItem ? React.cloneElement(c, { isBeginningOfRow: true, fullRow: true, ignoreFirstLabel: this.isFirstLabelIgnored }) : c));\r\n            });\r\n        }\r\n        else {\r\n            return (React.createElement(LayoutRowWrapper, { smallScreen: this.smallScreen, onResize: this.onResize, centerContent: this.isFirstLabelIgnored }, React.Children.map(this.props.children, c => {\r\n                if (c === null || c === void 0) {\r\n                    return c;\r\n                }\r\n                const childIsLayoutRowItem = this.isLayoutRowItemInstance(c);\r\n                return childIsLayoutRowItem ? React.cloneElement(c, { isBeginningOfRow: !i++ || this.smallScreen, ignoreFirstLabel: this.isFirstLabelIgnored }) : c;\r\n            })));\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    observable\r\n], LayoutRow.prototype, \"smallScreen\", void 0);\r\n__decorate([\r\n    observable\r\n], LayoutRow.prototype, \"isFirstLabelIgnored\", void 0);\r\nLayoutRow = __decorate([\r\n    observer\r\n], LayoutRow);\r\nexport { LayoutRow };\r\n//# sourceMappingURL=LayoutRow.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nconst $LayoutBoxItem = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nexport const LayoutBoxItem = styled($LayoutBoxItem).withConfig({ displayName: \"LayoutBoxItem\", componentId: \"sc-u6qv7x\" }) `\r\n    display: flex;\r\n    align-items: center;\r\n    /* put this to auto for tx alignment */\r\n    height: ${({ autoHeight, baseHeight }) => autoHeight ? \"auto\" : (baseHeight ? baseHeight + \"px\" : \"48px\")};\r\n    padding: 0 8px;\r\n    /* flex: 0 0 auto; put this to 1 1 for tx wrapping */\r\n    flex: ${({ autoHeight }) => autoHeight ? \"1 1\" : \"0 0\"} auto;\r\n    width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"200px\" : \"auto\")};\r\n    justify-content: ${props => (props.justifyContent ? props.justifyContent : (props.isBeginningOfRow ? \"flex-end\" : \"inherit\"))};\r\n\r\n    @media ${props => props.theme.media.mAndBelow} {\r\n        width: auto;\r\n        min-width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"125px\" : \"auto\")};\r\n    }\r\n\r\n    @media ${props => props.theme.media.xs} {\r\n        width: auto;\r\n        min-width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"95px\" : \"auto\")};\r\n    }\r\n`;\r\n//# sourceMappingURL=LayoutBoxItem.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nimport { LayoutBoxItem } from \"./LayoutBoxItem\";\r\nimport * as ReactIs from \"react-is\";\r\nconst $LayoutRowItemWrapper = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nconst LayoutRowItemWrapper = styled($LayoutRowItemWrapper).withConfig({ displayName: \"LayoutRowItemWrapper\", componentId: \"sc-1a68aag\" }) `\r\n    display: flex;\r\n    flex: ${props => props.fullRow ? \"1 1\" : \"0 0\"} auto;\r\n`;\r\nconst $LayoutInfoBoxItem = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nconst LayoutInfoBoxItem = styled($LayoutInfoBoxItem).withConfig({ displayName: \"LayoutInfoBoxItem\", componentId: \"sc-15va7f1\" }) `\r\n    display: flex;\r\n    flex: ${({ fullRow }) => fullRow ? \"1 1\" : \"0 1\"} auto;\r\n    flex-wrap: wrap;\r\n`;\r\nexport class LayoutRowItem extends React.PureComponent {\r\n    render() {\r\n        const childrenArray = React.Children.toArray(this.props.children)\r\n            .reduce((outArr, child) => {\r\n            if (ReactIs.isFragment(child)) {\r\n                outArr.push(...React.Children.map(child.props.children, c => {\r\n                    if (!ReactIs.isElement(c)) {\r\n                        console.error(`Fragment passed to LayoutRowItem contains a child that is not a React.Element.`, c);\r\n                        return c;\r\n                    }\r\n                    return React.cloneElement(c, {});\r\n                }));\r\n            }\r\n            else {\r\n                outArr.push(child);\r\n            }\r\n            return outArr;\r\n        }, []);\r\n        const labelElement = childrenArray.shift();\r\n        return (React.createElement(LayoutRowItemWrapper, { fullRow: this.props.fullRow },\r\n            this.props.ignoreFirstLabel ? null :\r\n                React.createElement(LayoutBoxItem, { isBeginningOfRow: this.props.isBeginningOfRow, baseHeight: this.props.baseHeight, autoWidth: this.props.autoWidth }, labelElement),\r\n            childrenArray.length === 1 ?\r\n                this.childrenArrayRender(childrenArray) :\r\n                React.createElement(LayoutInfoBoxItem, { fullRow: this.props.fullRow }, this.childrenArrayRender(childrenArray))));\r\n    }\r\n    childrenArrayRender(children) {\r\n        return children.map((c, idx) => {\r\n            return (React.createElement(LayoutBoxItem, { baseHeight: this.props.baseHeight, autoHeight: this.props.autoHeight, autoWidth: this.props.autoWidth, key: idx }, c));\r\n        });\r\n    }\r\n}\r\nLayoutRowItem._brand = \"layoutRowItem\";\r\n//# sourceMappingURL=LayoutRowItem.js.map","import styled from \"../styled-components\";\r\nimport * as React from \"react\";\r\nconst $Spacer = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nexport const Spacer = styled($Spacer).withConfig({ displayName: \"Spacer\", componentId: \"sc-4rpf73\" }) `\r\n    height: ${props => props.height};\r\n    flex: 0 0 auto;\r\n`;\r\n//# sourceMappingURL=Spacer.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nimport { Spacer } from \"../Spacer\";\r\nconst LayoutSectionWrapper = styled.div.withConfig({ displayName: \"LayoutSectionWrapper\", componentId: \"sc-1b8183u\" }) `\r\n    flex: 1 1 auto;\r\n    box-sizing: border-box;\r\n`;\r\nexport class LayoutSection extends React.Component {\r\n    render() {\r\n        let children = React.Children.toArray(this.props.children);\r\n        return children.length ?\r\n            (React.createElement(React.Fragment, null,\r\n                this.props.useWrapper ?\r\n                    React.createElement(LayoutSectionWrapper, null, this.props.children) :\r\n                    this.props.children,\r\n                React.createElement(Spacer, { height: \"48px\" }))) :\r\n            null;\r\n    }\r\n}\r\n//# sourceMappingURL=LayoutSection.js.map","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { splitLongHash } from \"../util/internal/hash\";\r\nconst HiddenHashPartWrapper = styled.span.withConfig({ displayName: \"HiddenHashPartWrapper\", componentId: \"sc-4zoryo\" }) `\r\n    &:before {\r\n        content: \" ... \";\r\n    }\r\n`;\r\nconst HiddenHashPart = styled.strong.withConfig({ displayName: \"HiddenHashPart\", componentId: \"sc-1uf7egn\" }) `\r\n    display: inline-block;\r\n    width: 0;\r\n    height: 0;\r\n    opacity: 0;\r\n    pointer-events: none;\r\n    font-size: 0;\r\n`;\r\nexport class Hash extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleCopy = (e) => {\r\n            e.preventDefault();\r\n            e.clipboardData.setData(\"text/plain\", \"0x\" + this.props.children);\r\n        };\r\n    }\r\n    render() {\r\n        let { children } = this.props;\r\n        let hash = \"0x\" + children.replace(/^0x/, \"\");\r\n        let chars = this.props.ellipsisChars;\r\n        let hashParts = splitLongHash(hash, this.props.ellipsisThreshold, chars);\r\n        return React.createElement(\"span\", { onCopy: this.handleCopy }, !this.props.useEllipsis || !hashParts ?\r\n            hash :\r\n            React.createElement(React.Fragment, null,\r\n                hashParts[0],\r\n                React.createElement(HiddenHashPartWrapper, null,\r\n                    React.createElement(HiddenHashPart, null, hashParts[1])),\r\n                hashParts[2]));\r\n    }\r\n}\r\nHash.defaultProps = {\r\n    ellipsisThreshold: 20,\r\n    ellipsisChars: 6,\r\n    useEllipsis: true\r\n};\r\n//# sourceMappingURL=Hash.js.map","import styled, { css } from \"../styled-components\";\r\nimport * as React from \"react\";\r\nconst $Label = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nexport const Label = styled($Label).withConfig({ displayName: \"Label\", componentId: \"sc-1npcbvl\" }) `\r\n    font-size: 12px;\r\n    line-height: 12px;\r\n    height: 12px;\r\n    text-transform: ${props => props.uppercase ? \"uppercase\" : \"none\"};\r\n    background-color: ${props => (props.arrow ?\r\n    (props.disabled ? props.theme.colors.label.disabled : props.theme.colors.base.highlight.color) :\r\n    \"transparent\")};\r\n    font-weight: 600;\r\n    letter-spacing: .5px;\r\n    padding: 4px 8px;\r\n    margin-right: ${props => props.arrow ? \"10px\" : \"0\"};\r\n    color: ${props => (props.arrow ?\r\n    props.theme.colors.base.highlight.contrast :\r\n    props.strong ?\r\n        (props.disabled ? props.theme.colors.label.disabled : props.theme.colors.label.strong) :\r\n        props.disabled ? props.theme.colors.label.disabled : props.theme.colors.label.default)};\r\n\r\n    /**\r\n     * When is the first label in a row the width of the container (LayoutRowItemWrapper) is 200px + 2*8px padding,\r\n     * and the display: flex along with justify-content: flex-end ensures that the label is right aligned.\r\n     * However, if the label is long enough (bigger than 200px) to wrap, the Label div will occupy all the container\r\n     * width, and the text will be aligned to right thanks to the rule below.\r\n     */\r\n    text-align: right;\r\n\r\n    ${props => props.arrow ? css `\r\n    position: relative;\r\n    &::before {\r\n        content: \"\";\r\n        position: absolute;\r\n        top: 0;\r\n        right: -10px;\r\n        border-top: 10px solid transparent;\r\n        border-bottom: 10px solid transparent;\r\n        border-left: 10px solid ${props.disabled ?\r\n    props.theme.colors.label.disabled :\r\n    props.theme.colors.base.highlight.color};\r\n        transform: scaleX(.8);\r\n        transform-origin: center left;\r\n    }\r\n    ` : \"\"}\r\n`;\r\nLabel.defaultProps = {\r\n    uppercase: true\r\n};\r\n//# sourceMappingURL=Label.js.map","import styled, { css } from \"../../../styled-components\";\r\nimport * as React from \"react\";\r\nconst IconRoot = styled.div.withConfig({ displayName: \"IconRoot\", componentId: \"sc-1x8jexb\" }) `\r\n    display: block;\r\n    /* Let the parent element handle mouse events (\r\n        because SVG is special and causes problems when used in menu layer with document click outside detection\r\n    ) */\r\n    pointer-events: none;\r\n`;\r\nconst ContentRoot = styled(\"div\").withConfig({ displayName: \"ContentRoot\", componentId: \"sc-1h36b7j\" }) `\r\n    padding-top: ${props => props.paddingTop}px;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n\r\n    ${props => props.fullWidth ? css `\r\n    width: 100%;\r\n    ` : ``}\r\n`;\r\nconst $Box = ({ children, className, Icon, iconPlacement, metrics, fullWidth }) => {\r\n    let icon = Icon ?\r\n        React.createElement(IconRoot, null,\r\n            React.createElement(Icon, { size: metrics.iconSize }))\r\n        : null;\r\n    let iconIsLeft = iconPlacement === \"left\";\r\n    return React.createElement(\"div\", { className: className },\r\n        iconIsLeft && icon,\r\n        children !== void 0 ?\r\n            React.createElement(ContentRoot, { fullWidth: fullWidth, paddingTop: metrics.textPaddingTop }, children)\r\n            : null,\r\n        !iconIsLeft && icon);\r\n};\r\nconst getColors = (colors, theme) => {\r\n    if (typeof colors === \"function\") {\r\n        return colors(theme);\r\n    }\r\n    return colors;\r\n};\r\nconst BORDER_WIDTH = 1;\r\nexport const Box = styled($Box).withConfig({ displayName: \"Box\", componentId: \"sc-p4qq1s\" }) `\r\n    display: flex;\r\n    font-size: ${props => props.metrics.fontSize}px;\r\n    line-height: ${props => props.metrics.lineHeight}px;\r\n    height: ${props => props.metrics.height}px;\r\n\r\n    ${props => props.fullWidth ? css `\r\n    width: 100%;\r\n    ` : ``}\r\n\r\n    padding: 0 ${props => props.metrics.textPaddingX - BORDER_WIDTH}px;\r\n\r\n    ${props => {\r\n    if (!props.Icon) {\r\n        return;\r\n    }\r\n    let hasText = props.children !== void 0;\r\n    let iconTextSpacing = Math.floor(props.metrics.textPaddingX / 2);\r\n    let iconMarginY = Math.max(0, (props.metrics.height - props.metrics.iconSize) / 2 - BORDER_WIDTH);\r\n    let iconMarginX = hasText ? iconTextSpacing : iconMarginY;\r\n    let iconIsLeft = props.iconPlacement === \"left\";\r\n    return css `\r\n            ${iconIsLeft ? css `\r\n                padding-left: ${iconMarginX}px;\r\n                    ${!hasText ? css `\r\n                    padding-right: ${iconMarginX}px;\r\n                    ` : ``}\r\n                ` : css `\r\n                padding-right: ${iconMarginX}px;\r\n                    ${!hasText ? css `\r\n                    padding-left: ${iconMarginX}px;\r\n                    ` : ``}\r\n            `}\r\n\r\n            & ${IconRoot} {\r\n                margin-top: ${iconMarginY}px;\r\n\r\n                ${hasText ? css `\r\n                    ${iconIsLeft ? css `\r\n                        margin-right: ${iconTextSpacing}px;\r\n                        ` : css `\r\n                        margin-left: ${iconTextSpacing}px;`}\r\n                ` : ``}\r\n            }\r\n        `;\r\n}}\r\n\r\n    font-weight: ${props => props.metrics.fontWeight};\r\n    letter-spacing: ${props => props.metrics.letterSpacing};\r\n    box-sizing: border-box;\r\n    vertical-align: middle;\r\n\r\n    border: ${BORDER_WIDTH}px ${props => (props.borderStyle || \"solid\")} ${props => (getColors(props.colors, props.theme).border ||\r\n    getColors(props.colors, props.theme).background ||\r\n    \"transparent\")};\r\n    border-radius: ${props => props.theme.spacing.borderRadius.thin}px;\r\n    background-color: ${props => (getColors(props.colors, props.theme).background || \"transparent\")};\r\n    color: ${props => getColors(props.colors, props.theme).text};\r\n`;\r\n//# sourceMappingURL=Box.js.map","import { __decorate, __rest } from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable } from \"mobx\";\r\nimport { Popover } from \"../Popover\";\r\nimport { DomNodeProxy } from \"../../util/react/DomNodeProxy\";\r\nimport { MultiHover } from \"../../util/react/MultiHover\";\r\nlet TooltipBase = class TooltipBase extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.visible = false;\r\n        this.handleMouseEnter = () => {\r\n            this.multiHover.enter(true);\r\n        };\r\n        this.handleMouseLeave = () => {\r\n            this.multiHover.leave();\r\n        };\r\n        this.multiHover = new MultiHover({ enterDelay: this.props.showDelay, leaveDelay: this.props.hideDelay });\r\n        this.multiHover.onActiveChange.subscribe(visible => this.visible = visible || false);\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.showDelay !== prevProps.showDelay) {\r\n            this.multiHover.applyOpts({ enterDelay: this.props.showDelay });\r\n        }\r\n        if (this.props.hideDelay !== prevProps.hideDelay) {\r\n            this.multiHover.applyOpts({ leaveDelay: this.props.hideDelay });\r\n        }\r\n    }\r\n    render() {\r\n        let _a = this.props, { showDelay: _unused, hideDelay: _unused2, content, style } = _a, otherProps = __rest(_a, [\"showDelay\", \"hideDelay\", \"content\", \"style\"]);\r\n        let target = React.Children.only(this.props.children);\r\n        return (React.createElement(Popover, Object.assign({ visible: this.visible, content: () => React.createElement(\"div\", { onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave }, content), style: Object.assign({ background: this.props.backgroundColor, boxShadow: \"0 2px 6px 0 rgba(0, 0, 0, .08)\", border: this.props.borderColor ? \"1px solid \" + this.props.borderColor : void 0, boxSizing: \"border-box\", pointerEvents: this.props.nonInteractive ? \"none\" : void 0 }, style) }, otherProps),\r\n            React.createElement(DomNodeProxy, { onMount: el => {\r\n                    el.addEventListener(\"mouseenter\", this.handleMouseEnter);\r\n                    el.addEventListener(\"mouseleave\", this.handleMouseLeave);\r\n                }, onUnmount: el => {\r\n                    el.removeEventListener(\"mouseenter\", this.handleMouseEnter);\r\n                    el.removeEventListener(\"mouseleave\", this.handleMouseLeave);\r\n                } }, target)));\r\n    }\r\n};\r\nTooltipBase.defaultProps = {\r\n    showDelay: 400,\r\n    hideDelay: 400,\r\n    backgroundColor: \"#fff\"\r\n};\r\n__decorate([\r\n    observable\r\n], TooltipBase.prototype, \"visible\", void 0);\r\nTooltipBase = __decorate([\r\n    observer\r\n], TooltipBase);\r\nexport { TooltipBase };\r\n//# sourceMappingURL=TooltipBase.js.map","import * as React from \"react\";\r\nimport styled, { withTheme } from \"../styled-components\";\r\nconst IconButtonRoot = styled(\"button\").withConfig({ displayName: \"IconButtonRoot\", componentId: \"sc-1ojxw7\" }) `\r\n    display: block;\r\n    background-color: transparent;\r\n    border: none; /* Remove borders */\r\n    color: ${({ buttonColor, theme }) => buttonColor};\r\n    cursor: pointer;\r\n    outline: none;\r\n    padding: 0px;\r\n`;\r\nclass $IconButton extends React.Component {\r\n    render() {\r\n        let Icon = this.props.Icon;\r\n        let theme = this.props.theme;\r\n        let iconSize = this.props.iconSize;\r\n        let color = typeof this.props.color === \"function\" ? this.props.color(theme) : this.props.color;\r\n        return (React.createElement(IconButtonRoot, { onClick: this.props.onClick, className: this.props.className, buttonColor: color },\r\n            React.createElement(Icon, { color: color, size: iconSize })));\r\n    }\r\n}\r\nexport const IconButton = withTheme($IconButton);\r\n//# sourceMappingURL=IconButton.js.map"],"mappings":"AAAA;;;;;;ACQA;AAIA;;ACJA;;ACDA;ACuBA;AACA;;AAEA;ACjCA;;;;ACOA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;ACrBA;;AAOA;AAGA;;AAEA;;AAGA;ACXA;;ACJA;;;AAOA;;;;ACCA;;;;;;;AAQA;;;;ACTA;AACA;;;;AAMA;AACA;AACA;;;;;;;;;AAaA;;;;;;;;;AASA;;;;AAMA;AAEA;;;;;;ACrCA;AACA;;;;;AAKA;;AAEA;AAeA;;AASA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;AACA;;;;AAjDA;AAwDA;AACA;AACA;AChGA;;;;ACMA;;;;AAeA","sourceRoot":""}