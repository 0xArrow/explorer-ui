{"version":3,"file":"5.0e67b841816284af2e9f.bundle.js","sources":["webpack:///./node_modules/@alethio/ui/lib/data/ByteSize.js","webpack:///./node_modules/@alethio/ui/lib/overlay/tooltip/TooltipText.js","webpack:///./node_modules/@alethio/ui/lib/overlay/tooltip/TooltipRegular.js","webpack:///./node_modules/@alethio/ui/lib/data/CopyValueTooltip.js","webpack:///./node_modules/@alethio/ui/lib/layout/Spacer.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/LayoutSection.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/internal/LayoutRowWrapper.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/LayoutRow.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/LayoutBoxItem.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/LayoutRowItem.js","webpack:///./node_modules/@alethio/ui/lib/overlay/Popover.js","webpack:///./node_modules/@alethio/ui/lib/data/Hash.js","webpack:///./node_modules/@alethio/ui/lib/data/Label.js","webpack:///./node_modules/@alethio/ui/lib/overlay/tooltip/Tooltip.js"],"sourcesContent":["import * as React from \"react\";\r\nimport { NumberFormatter } from \"../util/internal/locale/NumberFormatter\";\r\nexport class ByteSize extends React.Component {\r\n    render() {\r\n        return (this.props.format.replace(/%d/, new NumberFormatter().format(this.props.children, this.props.locale)));\r\n    }\r\n}\r\n//# sourceMappingURL=ByteSize.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nconst TooltipTextRoot = styled(\"div\") `\r\n    font-size: 16px;\r\n    line-height: 32px;\r\n    font-weight: 500;\r\n    letter-spacing: normal;\r\n\r\n    color: ${props => (props.textColor ?\r\n    props.textColor :\r\n    \"black\")};\r\n`;\r\nexport class TooltipText extends React.Component {\r\n    render() {\r\n        return React.createElement(TooltipTextRoot, { textColor: this.props.textColor }, this.props.children);\r\n    }\r\n}\r\n//# sourceMappingURL=TooltipText.js.map","import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { Tooltip } from \"./Tooltip\";\r\nimport styled from \"../../styled-components\";\r\nimport { TooltipText } from \"./TooltipText\";\r\nconst TooltipContent = styled.div `\r\n    padding: 4px 16px;\r\n`;\r\nexport class TooltipRegular extends React.Component {\r\n    render() {\r\n        let _a = this.props, { content, children } = _a, other = tslib_1.__rest(_a, [\"content\", \"children\"]);\r\n        return (React.createElement(Tooltip, Object.assign({}, other, { content: React.createElement(TooltipContent, null,\r\n                React.createElement(TooltipText, null, content)) }), children));\r\n    }\r\n}\r\nTooltipRegular.defaultProps = {\r\n    offset: 8\r\n};\r\n//# sourceMappingURL=TooltipRegular.js.map","import * as React from \"react\";\r\nimport { TooltipRegular } from \"../overlay/tooltip/TooltipRegular\";\r\nimport styled from \"../styled-components\";\r\nimport { CopyValueButton } from \"../control/button/CopyValueButton\";\r\nconst CopyValueButtonWrapper = styled.div `\n    margin: 0 0 0 16px;\n`;\r\nexport class CopyValueTooltip extends React.Component {\r\n    render() {\r\n        return (React.createElement(TooltipRegular, { content: React.createElement(\"div\", { style: { display: \"flex\", alignItems: \"center\" } },\r\n                React.createElement(\"div\", null, this.props.value),\r\n                React.createElement(CopyValueButtonWrapper, null,\r\n                    React.createElement(CopyValueButton, { value: this.props.value, clipboard: this.props.clipboard }))) }, this.props.children));\r\n    }\r\n}\r\n//# sourceMappingURL=CopyValueTooltip.js.map","import styled from \"../styled-components\";\r\nimport * as React from \"react\";\r\nconst $Spacer = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nexport const Spacer = styled($Spacer) `\r\n    height: ${props => props.height};\r\n    flex: 0 0 auto;\r\n`;\r\n//# sourceMappingURL=Spacer.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nimport { Spacer } from \"../Spacer\";\r\nconst LayoutSectionWrapper = styled.div `\r\n    flex: 1 1 auto;\r\n    box-sizing: border-box;\r\n`;\r\nexport class LayoutSection extends React.Component {\r\n    render() {\r\n        let children = React.Children.toArray(this.props.children);\r\n        return children.length ?\r\n            (React.createElement(React.Fragment, null,\r\n                this.props.useWrapper ?\r\n                    React.createElement(LayoutSectionWrapper, null, this.props.children) :\r\n                    this.props.children,\r\n                React.createElement(Spacer, { height: \"48px\" }))) :\r\n            null;\r\n    }\r\n}\r\n//# sourceMappingURL=LayoutSection.js.map","import styled, { css } from \"../../../styled-components\";\r\nimport * as React from \"react\";\r\nclass $LayoutRowWrapper extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.divWidth = 0;\r\n        this.onResize = () => {\r\n            if (this.props.onResize) {\r\n                this.props.onResize(this.divWidth);\r\n            }\r\n        };\r\n        this.handleResize = () => {\r\n            if (this.divElement) {\r\n                this.divWidth = this.divElement.clientWidth;\r\n                this.onResize();\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return (React.createElement(\"div\", { className: this.props.className, ref: r => { this.divElement = r; } }, this.props.children));\r\n    }\r\n    componentDidMount() {\r\n        window.addEventListener(\"resize\", this.handleResize);\r\n        this.handleResize();\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.handleResize);\r\n    }\r\n}\r\nexport const LayoutRowWrapper = styled($LayoutRowWrapper) `\r\n    display: ${({ smallScreen }) => smallScreen ? \"block\" : \"flex\"};\r\n    ${({ centerContent }) => centerContent ? css `\r\n        justify-content: center;\r\n    ` : \"\"};\r\n`;\r\n//# sourceMappingURL=LayoutRowWrapper.js.map","import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { LayoutRowWrapper } from \"./internal/LayoutRowWrapper\";\r\nimport { observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nlet LayoutRow = class LayoutRow extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.smallScreen = false;\r\n        this.isFirstLabelIgnored = false;\r\n        this.onResize = (width) => {\r\n            this.smallScreen = this.props.minWidth ?\r\n                width <= this.props.minWidth :\r\n                false;\r\n            if (!this.props.responsive || !this.props.responsive.ignoreFirstLabel) {\r\n                return;\r\n            }\r\n            this.isFirstLabelIgnored = (this.props.responsive.ignoreFirstLabel === \"forLowRes\" && width < 540)\r\n                || (this.props.responsive.ignoreFirstLabel === \"forMobile\" && width < 460);\r\n        };\r\n    }\r\n    isLayoutRowItemInstance(c) {\r\n        let childIsLayoutRowItem = false;\r\n        try {\r\n            const childType = c.type;\r\n            childIsLayoutRowItem = childType._brand === \"layoutRowItem\";\r\n        }\r\n        catch (e) {\r\n        }\r\n        return childIsLayoutRowItem;\r\n    }\r\n    render() {\r\n        let i = 0;\r\n        if (this.smallScreen) {\r\n            return React.Children.map(this.props.children, c => {\r\n                if (c === null || c === void 0) {\r\n                    return c;\r\n                }\r\n                const childIsLayoutRowItem = this.isLayoutRowItemInstance(c);\r\n                return (React.createElement(LayoutRowWrapper, { smallScreen: this.smallScreen, onResize: this.onResize, centerContent: this.isFirstLabelIgnored }, childIsLayoutRowItem ? React.cloneElement(c, { isBeginningOfRow: true, fullRow: true, ignoreFirstLabel: this.isFirstLabelIgnored }) : c));\r\n            });\r\n        }\r\n        else {\r\n            return (React.createElement(LayoutRowWrapper, { smallScreen: this.smallScreen, onResize: this.onResize, centerContent: this.isFirstLabelIgnored }, React.Children.map(this.props.children, c => {\r\n                if (c === null || c === void 0) {\r\n                    return c;\r\n                }\r\n                const childIsLayoutRowItem = this.isLayoutRowItemInstance(c);\r\n                return childIsLayoutRowItem ? React.cloneElement(c, { isBeginningOfRow: !i++ || this.smallScreen, ignoreFirstLabel: this.isFirstLabelIgnored }) : c;\r\n            })));\r\n        }\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    observable\r\n], LayoutRow.prototype, \"smallScreen\", void 0);\r\ntslib_1.__decorate([\r\n    observable\r\n], LayoutRow.prototype, \"isFirstLabelIgnored\", void 0);\r\nLayoutRow = tslib_1.__decorate([\r\n    observer\r\n], LayoutRow);\r\nexport { LayoutRow };\r\n//# sourceMappingURL=LayoutRow.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nconst $LayoutBoxItem = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nexport const LayoutBoxItem = styled($LayoutBoxItem) `\r\n    display: flex;\r\n    align-items: center;\r\n    /* put this to auto for tx alignment */\r\n    height: ${({ autoHeight, baseHeight }) => autoHeight ? \"auto\" : (baseHeight ? baseHeight + \"px\" : \"48px\")};\r\n    padding: 0 8px;\r\n    /* flex: 0 0 auto; put this to 1 1 for tx wrapping */\r\n    flex: ${({ autoHeight }) => autoHeight ? \"1 1\" : \"0 0\"} auto;\r\n    width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"200px\" : \"auto\")};\r\n    justify-content: ${props => (props.justifyContent ? props.justifyContent : (props.isBeginningOfRow ? \"flex-end\" : \"inherit\"))};\r\n\r\n    @media ${props => props.theme.mediaQueries.breakPoints.smallerThanFullView} {\r\n        width: auto;\r\n        min-width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"125px\" : \"auto\")};\r\n    }\r\n\r\n    @media ${props => props.theme.mediaQueries.breakPoints.lessThan620px} {\r\n        width: auto;\r\n        min-width: ${props => (props.isBeginningOfRow && !props.autoWidth ? \"95px\" : \"auto\")};\r\n    }\r\n`;\r\n//# sourceMappingURL=LayoutBoxItem.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nimport { LayoutBoxItem } from \"./LayoutBoxItem\";\r\nimport * as ReactIs from \"react-is\";\r\nconst $LayoutRowItemWrapper = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nconst LayoutRowItemWrapper = styled($LayoutRowItemWrapper) `\r\n    display: flex;\r\n    flex: ${props => props.fullRow ? \"1 1\" : \"0 0\"} auto;\r\n`;\r\nconst $LayoutInfoBoxItem = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nconst LayoutInfoBoxItem = styled($LayoutInfoBoxItem) `\r\n    display: flex;\r\n    flex: ${({ fullRow }) => fullRow ? \"1 1\" : \"0 1\"} auto;\r\n    flex-wrap: wrap;\r\n`;\r\nexport class LayoutRowItem extends React.PureComponent {\r\n    render() {\r\n        const childrenArray = React.Children.toArray(this.props.children)\r\n            .reduce((outArr, child) => {\r\n            if (ReactIs.isFragment(child)) {\r\n                outArr.push(...React.Children.map(child.props.children, c => {\r\n                    if (!ReactIs.isElement(c)) {\r\n                        console.error(`Fragment passed to LayoutRowItem contains a child that is not a React.Element.`, c);\r\n                        return c;\r\n                    }\r\n                    return React.cloneElement(c, {});\r\n                }));\r\n            }\r\n            else {\r\n                outArr.push(child);\r\n            }\r\n            return outArr;\r\n        }, []);\r\n        const labelElement = childrenArray.shift();\r\n        return (React.createElement(LayoutRowItemWrapper, { fullRow: this.props.fullRow },\r\n            this.props.ignoreFirstLabel ? null :\r\n                React.createElement(LayoutBoxItem, { isBeginningOfRow: this.props.isBeginningOfRow, baseHeight: this.props.baseHeight, autoWidth: this.props.autoWidth }, labelElement),\r\n            childrenArray.length === 1 ?\r\n                this.childrenArrayRender(childrenArray) :\r\n                React.createElement(LayoutInfoBoxItem, { fullRow: this.props.fullRow }, this.childrenArrayRender(childrenArray))));\r\n    }\r\n    childrenArrayRender(children) {\r\n        return children.map((c, idx) => {\r\n            return (React.createElement(LayoutBoxItem, { baseHeight: this.props.baseHeight, autoHeight: this.props.autoHeight, autoWidth: this.props.autoWidth, key: idx }, c));\r\n        });\r\n    }\r\n}\r\nLayoutRowItem._brand = \"layoutRowItem\";\r\n//# sourceMappingURL=LayoutRowItem.js.map","import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Manager, Reference, Popper } from \"react-popper\";\r\nimport { observer } from \"mobx-react\";\r\nimport { DomNodeProxy } from \"../util/react/DomNodeProxy\";\r\nimport styled, { css } from \"../styled-components\";\r\nconst getArrowStyle = (placement, arrowSize, arrowColor) => {\r\n    let neutralBorder = arrowSize + \"px solid transparent\";\r\n    let colorBorder = arrowSize + \"px solid \" + arrowColor;\r\n    if (!placement) {\r\n        return ``;\r\n    }\r\n    if (placement.startsWith(\"top\")) {\r\n        return css `\r\n            transform: translateX(-50%);\r\n            border-left: ${neutralBorder};\r\n            border-right: ${neutralBorder};\r\n            border-top: ${colorBorder};\r\n        `;\r\n    }\r\n    else if (placement.startsWith(\"bottom\")) {\r\n        return css `\r\n            transform: translateX(-50%);\r\n            top: -${arrowSize}px;\r\n            border-left: ${neutralBorder};\r\n            border-right: ${neutralBorder};\r\n            border-bottom: ${colorBorder};\r\n        `;\r\n    }\r\n    else if (placement.startsWith(\"left\")) {\r\n        return css `\r\n            transform: translateY(-50%);\r\n            right: -${arrowSize}px;\r\n            border-top: ${neutralBorder};\r\n            border-left: ${colorBorder};\r\n            border-bottom: ${neutralBorder};\r\n        `;\r\n    }\r\n    else if (placement.startsWith(\"right\")) {\r\n        return css `\r\n            transform: translateY(-50%);\r\n            left: -${arrowSize}px;\r\n            border-top: ${neutralBorder};\r\n            border-right: ${colorBorder};\r\n            border-bottom: ${neutralBorder};\r\n        `;\r\n    }\r\n    else {\r\n        return ``;\r\n    }\r\n};\r\nconst getArrowPosition = (placement) => {\r\n    if (!placement) {\r\n        return ``;\r\n    }\r\n    if (placement.startsWith(\"bottom\")) {\r\n        return css `\r\n            top: 0;\r\n        `;\r\n    }\r\n    else if (placement.startsWith(\"left\")) {\r\n        return css `\r\n            right: 0;\r\n        `;\r\n    }\r\n    else {\r\n        return ``;\r\n    }\r\n};\r\nconst Arrow = styled(\"div\") `\r\n    position: absolute;\r\n    ${props => getArrowPosition(props.placement)}\r\n\r\n    &:before, &:after {\r\n        content: \"\";\r\n        position: absolute;\r\n    }\r\n    &:before {\r\n        ${props => props.borderColor ? getArrowStyle(props.placement, 6, props.borderColor) : ``}\r\n    }\r\n    &:after {\r\n        ${props => getArrowStyle(props.placement, 5, props.backgroundColor)}\r\n    }\r\n`;\r\nlet Popover = class Popover extends React.Component {\r\n    render() {\r\n        return (React.createElement(Manager, null,\r\n            React.createElement(Reference, null, ({ ref }) => React.createElement(DomNodeProxy, { onMount: el => ref(el), onUnmount: el => ref(null) }, this.props.children)),\r\n            this.props.visible ?\r\n                ReactDOM.createPortal(React.createElement(Popper, Object.assign({ placement: this.props.placement, modifiers: Object.assign({ offset: {\r\n                            offset: `${this.props.alignmentOffset + \"px\" || 0}, ${this.props.offset}px`\r\n                        } }, (this.props.noFlip ? { flip: { enabled: false } } : {})) }, (this.props.referenceElement ? { referenceElement: this.createReferenceObject() } : {})), ({ ref, style, placement, arrowProps }) => (React.createElement(\"div\", { ref: ref, onClick: e => e.stopPropagation(), style: Object.assign({}, style, { background: this.props.backgroundColor, boxShadow: \"0 2px 6px 0 rgba(0, 0, 0, .08)\", border: this.props.borderColor ? \"1px solid \" + this.props.borderColor : void 0, boxSizing: \"border-box\", pointerEvents: this.props.nonInteractive ? \"none\" : void 0 }, this.props.style), \"data-placement\": placement },\r\n                    this.props.content,\r\n                    !this.props.noArrow ?\r\n                        React.createElement(Arrow, { placement: placement, backgroundColor: this.props.backgroundColor, borderColor: this.props.borderColor, innerRef: arrowProps.ref, style: arrowProps.style })\r\n                        : null))), document.body)\r\n                : null));\r\n    }\r\n    createReferenceObject() {\r\n        let referenceEl = this.props.referenceElement;\r\n        if (typeof referenceEl !== \"function\") {\r\n            return referenceEl;\r\n        }\r\n        const getWrapperEl = referenceEl;\r\n        return {\r\n            getBoundingClientRect() {\r\n                return getWrapperEl() ? getWrapperEl().getBoundingClientRect() :\r\n                    { bottom: 0, left: 0, right: 0, top: 0, height: 0, width: 0 };\r\n            },\r\n            get clientWidth() {\r\n                return getWrapperEl() ? getWrapperEl().clientWidth : 0;\r\n            },\r\n            get clientHeight() {\r\n                return getWrapperEl() ? getWrapperEl().clientHeight : 0;\r\n            }\r\n        };\r\n    }\r\n};\r\nPopover.defaultProps = {\r\n    backgroundColor: \"#fff\",\r\n    placement: \"top\",\r\n    offset: 0\r\n};\r\nPopover = tslib_1.__decorate([\r\n    observer\r\n], Popover);\r\nexport { Popover };\r\n//# sourceMappingURL=Popover.js.map","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { splitLongHash } from \"../util/internal/hash\";\r\nconst HiddenHashPartWrapper = styled.span `\r\n    &:before {\r\n        content: \" ... \";\r\n    }\r\n`;\r\nconst HiddenHashPart = styled.strong `\r\n    display: inline-block;\r\n    width: 0;\r\n    height: 0;\r\n    opacity: 0;\r\n    pointer-events: none;\r\n    font-size: 0;\r\n`;\r\nexport class Hash extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleCopy = (e) => {\r\n            e.preventDefault();\r\n            e.clipboardData.setData(\"text/plain\", \"0x\" + this.props.children);\r\n        };\r\n    }\r\n    render() {\r\n        let { children } = this.props;\r\n        let hash = \"0x\" + children.replace(/^0x/, \"\");\r\n        let chars = this.props.ellipsisChars;\r\n        let hashParts = splitLongHash(hash, this.props.ellipsisThreshold, chars);\r\n        return React.createElement(\"span\", { onCopy: this.handleCopy }, !this.props.useEllipsis || !hashParts ?\r\n            hash :\r\n            React.createElement(React.Fragment, null,\r\n                hashParts[0],\r\n                React.createElement(HiddenHashPartWrapper, null,\r\n                    React.createElement(HiddenHashPart, null, hashParts[1])),\r\n                hashParts[2]));\r\n    }\r\n}\r\nHash.defaultProps = {\r\n    ellipsisThreshold: 20,\r\n    ellipsisChars: 6,\r\n    useEllipsis: true\r\n};\r\n//# sourceMappingURL=Hash.js.map","import styled, { css } from \"../styled-components\";\r\nimport * as React from \"react\";\r\nconst $Label = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nexport const Label = styled($Label) `\n    font-size: 12px;\n    line-height: 12px;\n    height: 12px;\n    text-transform: uppercase;\n    background-color: ${props => (props.arrow ?\r\n    (props.disabled ? props.theme.colors.label.disabled : props.theme.colors.base.highlight.color) :\r\n    \"transparent\")};\n    font-weight: 600;\n    letter-spacing: .5px;\n    padding: 4px 8px;\n    margin-right: ${props => props.arrow ? \"10px\" : \"0\"};\n    color: ${props => (props.arrow ?\r\n    props.theme.colors.base.highlight.contrast :\r\n    props.strong ?\r\n        (props.disabled ? props.theme.colors.label.disabled : props.theme.colors.label.strong) :\r\n        props.disabled ? props.theme.colors.label.disabled : props.theme.colors.label.default)};\n\n    /**\n     * When is the first label in a row the width of the container (LayoutRowItemWrapper) is 200px + 2*8px padding,\n     * and the display: flex along with justify-content: flex-end ensures that the label is right aligned.\n     * However, if the label is long enough (bigger than 200px) to wrap, the Label div will occupy all the container\n     * width, and the text will be aligned to right thanks to the rule below.\n     */\n    text-align: right;\n\n    ${props => props.arrow ? css `\n    position: relative;\n    &::before {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        right: -10px;\n        border-top: 10px solid transparent;\n        border-bottom: 10px solid transparent;\n        border-left: 10px solid ${props.disabled ?\r\n    props.theme.colors.label.disabled :\r\n    props.theme.colors.base.highlight.color};\n        transform: scaleX(.8);\n        transform-origin: center left;\n    }\n    ` : \"\"}\n`;\r\n//# sourceMappingURL=Label.js.map","import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable } from \"mobx\";\r\nimport { Popover } from \"../Popover\";\r\nimport { DomNodeProxy } from \"../../util/react/DomNodeProxy\";\r\nimport { MultiHover } from \"../../util/react/MultiHover\";\r\nlet Tooltip = class Tooltip extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.visible = false;\r\n        this.handleMouseEnter = () => {\r\n            this.multiHover.enter(true);\r\n        };\r\n        this.handleMouseLeave = () => {\r\n            this.multiHover.leave();\r\n        };\r\n        this.multiHover = new MultiHover({ enterDelay: this.props.showDelay, leaveDelay: this.props.hideDelay });\r\n        this.multiHover.onActiveChange.subscribe(visible => this.visible = visible || false);\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.showDelay !== prevProps.showDelay) {\r\n            this.multiHover.applyOpts({ enterDelay: this.props.showDelay });\r\n        }\r\n        if (this.props.hideDelay !== prevProps.hideDelay) {\r\n            this.multiHover.applyOpts({ leaveDelay: this.props.hideDelay });\r\n        }\r\n    }\r\n    render() {\r\n        let _a = this.props, { showDelay: _unused, hideDelay: _unused2, content } = _a, otherProps = tslib_1.__rest(_a, [\"showDelay\", \"hideDelay\", \"content\"]);\r\n        let target = React.Children.only(this.props.children);\r\n        return (React.createElement(Popover, Object.assign({ visible: this.visible, content: React.createElement(\"div\", { onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave }, content) }, otherProps),\r\n            React.createElement(DomNodeProxy, { onMount: el => {\r\n                    el.addEventListener(\"mouseenter\", this.handleMouseEnter);\r\n                    el.addEventListener(\"mouseleave\", this.handleMouseLeave);\r\n                }, onUnmount: el => {\r\n                    el.removeEventListener(\"mouseenter\", this.handleMouseEnter);\r\n                    el.removeEventListener(\"mouseleave\", this.handleMouseLeave);\r\n                } }, target)));\r\n    }\r\n};\r\nTooltip.defaultProps = {\r\n    showDelay: 400,\r\n    hideDelay: 400\r\n};\r\ntslib_1.__decorate([\r\n    observable\r\n], Tooltip.prototype, \"visible\", void 0);\r\nTooltip = tslib_1.__decorate([\r\n    observer\r\n], Tooltip);\r\nexport { Tooltip };\r\n//# sourceMappingURL=Tooltip.js.map"],"mappings":"AAAA;;;;;;ACQA;AAIA;;ACJA;;ACDA;ACHA;;ACJA;;;AAOA;ACuBA;AACA;;AAEA;ACjCA;;;;ACOA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;ACrBA;;AAOA;AAGA;;AAEA;;AAGA;;ACCA;AACA;AACA;AAGA;;AAGA;AACA;AACA;AACA;AAGA;;AAGA;AACA;AACA;AACA;AAGA;;AAGA;AACA;AACA;AACA;AAIA;;AAuBA;;AAXA;;AAMA;AACA;;;;;;AAWA;;;AAGA;;AAGA;;;;AC7EA;;;;;;;AAQA;;;;;ACRA;;;;AAMA;AACA;AACA;;;;;;;;;AAaA;;;;;;;;;AASA;;;;AAMA;AC5CA","sourceRoot":""}