{"version":3,"file":"9.619ce1eabe43dcdeeab0.bundle.js","sources":["webpack:///./node_modules/@storybook/addon-storysource/dist/events.js","webpack:///./node_modules/@alethio/ui/lib/overlay/Popover.js"],"sourcesContent":["\"use strict\";\n\nrequire(\"core-js/modules/es.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EVENT_ID = exports.PANEL_ID = exports.ADDON_ID = void 0;\nvar ADDON_ID = 'storybook/storysource';\nexports.ADDON_ID = ADDON_ID;\nvar PANEL_ID = \"\".concat(ADDON_ID, \"/panel\");\nexports.PANEL_ID = PANEL_ID;\nvar EVENT_ID = \"\".concat(ADDON_ID, \"/set\");\nexports.EVENT_ID = EVENT_ID;","import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Manager, Reference, Popper } from \"react-popper\";\r\nimport { observer } from \"mobx-react\";\r\nimport { DomNodeProxy } from \"../util/react/DomNodeProxy\";\r\nimport styled, { css } from \"../styled-components\";\r\nconst getArrowStyle = (placement, arrowSize, arrowColor) => {\r\n    let neutralBorder = arrowSize + \"px solid transparent\";\r\n    let colorBorder = arrowSize + \"px solid \" + arrowColor;\r\n    if (!placement) {\r\n        return ``;\r\n    }\r\n    if (placement.startsWith(\"top\")) {\r\n        return css `\r\n            transform: translateX(-50%);\r\n            border-left: ${neutralBorder};\r\n            border-right: ${neutralBorder};\r\n            border-top: ${colorBorder};\r\n        `;\r\n    }\r\n    else if (placement.startsWith(\"bottom\")) {\r\n        return css `\r\n            transform: translateX(-50%);\r\n            top: -${arrowSize}px;\r\n            border-left: ${neutralBorder};\r\n            border-right: ${neutralBorder};\r\n            border-bottom: ${colorBorder};\r\n        `;\r\n    }\r\n    else if (placement.startsWith(\"left\")) {\r\n        return css `\r\n            transform: translateY(-50%);\r\n            right: -${arrowSize}px;\r\n            border-top: ${neutralBorder};\r\n            border-left: ${colorBorder};\r\n            border-bottom: ${neutralBorder};\r\n        `;\r\n    }\r\n    else if (placement.startsWith(\"right\")) {\r\n        return css `\r\n            transform: translateY(-50%);\r\n            left: -${arrowSize}px;\r\n            border-top: ${neutralBorder};\r\n            border-right: ${colorBorder};\r\n            border-bottom: ${neutralBorder};\r\n        `;\r\n    }\r\n    else {\r\n        return ``;\r\n    }\r\n};\r\nconst getArrowPosition = (placement) => {\r\n    if (!placement) {\r\n        return ``;\r\n    }\r\n    if (placement.startsWith(\"bottom\")) {\r\n        return css `\r\n            top: 0;\r\n        `;\r\n    }\r\n    else if (placement.startsWith(\"left\")) {\r\n        return css `\r\n            right: 0;\r\n        `;\r\n    }\r\n    else {\r\n        return ``;\r\n    }\r\n};\r\nconst Arrow = styled(\"div\") `\r\n    position: absolute;\r\n    ${props => getArrowPosition(props.placement)}\r\n\r\n    &:before, &:after {\r\n        content: \"\";\r\n        position: absolute;\r\n    }\r\n    &:before {\r\n        ${props => props.borderColor ? getArrowStyle(props.placement, 6, props.borderColor) : ``}\r\n    }\r\n    &:after {\r\n        ${props => getArrowStyle(props.placement, 5, props.backgroundColor)}\r\n    }\r\n`;\r\nlet Popover = class Popover extends React.Component {\r\n    render() {\r\n        return (React.createElement(Manager, null,\r\n            React.createElement(Reference, null, ({ ref }) => React.createElement(DomNodeProxy, { onMount: el => ref(el), onUnmount: el => ref(null) }, this.props.children)),\r\n            this.props.visible ?\r\n                ReactDOM.createPortal(React.createElement(Popper, Object.assign({ placement: this.props.placement, modifiers: Object.assign({ offset: {\r\n                            offset: `${this.props.alignmentOffset + \"px\" || 0}, ${this.props.offset}px`\r\n                        } }, (this.props.noFlip ? { flip: { enabled: false } } : {})) }, (this.props.referenceElement ? { referenceElement: this.createReferenceObject() } : {})), ({ ref, style, placement, arrowProps }) => (React.createElement(\"div\", { ref: ref, onClick: e => e.stopPropagation(), style: Object.assign({}, style, { background: this.props.backgroundColor, boxShadow: \"0 2px 6px 0 rgba(0, 0, 0, .08)\", border: this.props.borderColor ? \"1px solid \" + this.props.borderColor : void 0, boxSizing: \"border-box\", pointerEvents: this.props.nonInteractive ? \"none\" : void 0 }, this.props.style), \"data-placement\": placement },\r\n                    this.props.content,\r\n                    !this.props.noArrow ?\r\n                        React.createElement(Arrow, { placement: placement, backgroundColor: this.props.backgroundColor, borderColor: this.props.borderColor, innerRef: arrowProps.ref, style: arrowProps.style })\r\n                        : null))), document.body)\r\n                : null));\r\n    }\r\n    createReferenceObject() {\r\n        let referenceEl = this.props.referenceElement;\r\n        if (typeof referenceEl !== \"function\") {\r\n            return referenceEl;\r\n        }\r\n        const getWrapperEl = referenceEl;\r\n        return {\r\n            getBoundingClientRect() {\r\n                return getWrapperEl() ? getWrapperEl().getBoundingClientRect() :\r\n                    { bottom: 0, left: 0, right: 0, top: 0, height: 0, width: 0 };\r\n            },\r\n            get clientWidth() {\r\n                return getWrapperEl() ? getWrapperEl().clientWidth : 0;\r\n            },\r\n            get clientHeight() {\r\n                return getWrapperEl() ? getWrapperEl().clientHeight : 0;\r\n            }\r\n        };\r\n    }\r\n};\r\nPopover.defaultProps = {\r\n    backgroundColor: \"#fff\",\r\n    placement: \"top\",\r\n    offset: 0\r\n};\r\nPopover = tslib_1.__decorate([\r\n    observer\r\n], Popover);\r\nexport { Popover };\r\n//# sourceMappingURL=Popover.js.map"],"mappings":"AAEA;;ACcA;AACA;AACA;AAGA;;AAGA;AACA;AACA;AACA;AAGA;;AAGA;AACA;AACA;AACA;AAGA;;AAGA;AACA;AACA;AACA;AAIA;;AAuBA;;AAXA;;AAMA;AACA;;;;;;AAWA;;;AAGA;;AAGA","sourceRoot":""}