{"version":3,"file":"4.121530bbbe5c70b406b7.bundle.js","sources":["webpack:///./node_modules/react-transition-group/index.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridLayout.js","webpack:///./node_modules/@alethio/ui/lib/icon/AddIcon.js","webpack:///./node_modules/@alethio/ui/lib/fx/Fade.js","webpack:///./node_modules/@alethio/ui/lib/control/menu/Menu.js","webpack:///./node_modules/@alethio/ui/lib/control/menu/MenuItem.js","webpack:///./node_modules/@alethio/ui/lib/control/internal/ToggleInput.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/header/GridHeader.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridRow.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/header/GridHeaderItem.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridWrapper.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridData.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/Grid.js","webpack:///./node_modules/@alethio/ui/lib/data/Hash.js","webpack:///./node_modules/@alethio/ui/lib/data/Label.js","webpack:///./node_modules/@alethio/ui/lib/layout/content/box/Box.js","webpack:///./node_modules/@alethio/ui/lib/control/IconButton.js"],"sourcesContent":["\"use strict\";\n\nvar _CSSTransition = _interopRequireDefault(require(\"./CSSTransition\"));\n\nvar _ReplaceTransition = _interopRequireDefault(require(\"./ReplaceTransition\"));\n\nvar _TransitionGroup = _interopRequireDefault(require(\"./TransitionGroup\"));\n\nvar _Transition = _interopRequireDefault(require(\"./Transition\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = {\n  Transition: _Transition.default,\n  TransitionGroup: _TransitionGroup.default,\n  ReplaceTransition: _ReplaceTransition.default,\n  CSSTransition: _CSSTransition.default\n};","import styled from \"../../../styled-components\";\r\nexport const GridLayout = styled(\"div\").withConfig({ displayName: \"GridLayout\", componentId: \"sc-16vowwg\" }) `\r\n    overflow-x: auto;\r\n    display: grid;\r\n    grid-template-columns: auto ${({ numberOfFields }) => {\r\n    if (numberOfFields === 0) {\r\n        return \"\";\r\n    }\r\n    if (numberOfFields === 1) {\r\n        return \"max-content\";\r\n    }\r\n    const repeatTimes = numberOfFields - 1;\r\n    return \"repeat( \" + repeatTimes + \", max-content 1px) max-content\";\r\n}} auto;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    letter-spacing: .2px;\r\n`;\r\n//# sourceMappingURL=GridLayout.js.map","import * as React from \"react\";\r\nimport { SvgIcon } from \"../util/react/SvgIcon\";\r\nexport class AddIcon extends React.Component {\r\n    render() {\r\n        return (React.createElement(SvgIcon, Object.assign({}, this.props),\r\n            React.createElement(\"g\", { stroke: \"none\", strokeWidth: \"1\", fill: \"none\", fillRule: \"evenodd\" },\r\n                React.createElement(\"polygon\", { points: \"0 0 24 0 24 24 0 24\" }),\r\n                React.createElement(\"path\", { d: \"M19,3 L5,3 C3.89,3 3,3.9 3,5 L3,19 C3,20.1 3.89,21 5,21 L19,21 \" +\r\n                        \"C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 Z \" +\r\n                        \"M17,13 L13,13 L13,17 L11,17 L11,13 L7,13 L7,11 \" +\r\n                        \"L11,11 L11,7 L13,7 L13,11 L17,11 L17,13 Z\", fill: \"currentColor\", fillRule: \"nonzero\" }))));\r\n    }\r\n}\r\n//# sourceMappingURL=AddIcon.js.map","import { __decorate } from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport styled from \"../styled-components\";\r\nimport { observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nconst CLASS_NAME = \"fade\";\r\nconst FadeRoot = styled(\"div\").withConfig({ displayName: \"FadeRoot\", componentId: \"sc-rfuc09\" }) `\r\n    & .${CLASS_NAME}-enter,\r\n    & .${CLASS_NAME}-exit {\r\n        transition: opacity ${props => props.duration}s ease-in-out;\r\n    }\r\n\r\n    & .${CLASS_NAME}-enter {\r\n        opacity: 0;\r\n    }\r\n\r\n    & .${CLASS_NAME}-enter-active {\r\n        opacity: 1;\r\n    }\r\n\r\n    & .${CLASS_NAME}-exit {\r\n        opacity: 1;\r\n    }\r\n\r\n    & .${CLASS_NAME}-exit-active {\r\n        opacity: 0;\r\n    }\r\n`;\r\nlet Fade = class Fade extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.active = false;\r\n    }\r\n    componentDidMount() {\r\n        if (this.props.enabled === true) {\r\n            this.delayTimer = setTimeout(() => this.active = true, this.props.delay * 1000);\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.enabled !== this.props.enabled) {\r\n            if (this.delayTimer) {\r\n                clearTimeout(this.delayTimer);\r\n            }\r\n            this.delayTimer = setTimeout(() => {\r\n                this.active = (this.props.enabled === true);\r\n            }, this.props.delay * 1000);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.delayTimer) {\r\n            clearTimeout(this.delayTimer);\r\n        }\r\n    }\r\n    render() {\r\n        return (React.createElement(FadeRoot, { duration: this.props.duration, innerRef: this.props.innerRef },\r\n            React.createElement(CSSTransition, { in: this.active && this.props.in, classNames: CLASS_NAME, timeout: this.props.duration * 1000, onExited: this.props.onFinished, unmountOnExit: true },\r\n                React.createElement(\"div\", null, this.props.children))));\r\n    }\r\n};\r\nFade.defaultProps = {\r\n    duration: .2,\r\n    delay: 0,\r\n    in: true,\r\n    enabled: true\r\n};\r\n__decorate([\r\n    observable\r\n], Fade.prototype, \"active\", void 0);\r\nFade = __decorate([\r\n    observer\r\n], Fade);\r\nexport { Fade };\r\n//# sourceMappingURL=Fade.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nconst $Menu = styled.div.withConfig({ displayName: \"$Menu\", componentId: \"sc-1zvwp4\" }) `\r\n    box-shadow: 0 8px 16px 0 rgba(167, 181, 209, 0.6);\r\n    border-radius: ${props => props.theme.spacing.borderRadius.normal}px;\r\n    padding: 8px 0;\r\n    max-height: ${props => props.maxHeight}px;\r\n    max-width: ${props => props.maxWidth}px;\r\n    overflow-y: auto;\r\n    background: ${props => props.theme.colors.menu.background};\r\n    cursor: default;\r\n`;\r\nexport class Menu extends React.Component {\r\n    render() {\r\n        return (React.createElement($Menu, Object.assign({}, this.props), this.props.children));\r\n    }\r\n}\r\nMenu.defaultProps = {\r\n    maxHeight: 300\r\n};\r\n//# sourceMappingURL=Menu.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nimport { Box } from \"../../layout/content/box/Box\";\r\nimport { HoverState } from \"../../util/react/HoverState\";\r\nconst StyledBox = styled(Box).withConfig({ displayName: \"StyledBox\", componentId: \"sc-1n6rm6k\" }) `\r\n    transition: background-color .2s ease-in-out, border-color .2s ease-in-out;\r\n`;\r\nconst getColorSet = (state) => (theme) => theme.colors.menu.item[state];\r\nconst getState = (disabled, hover, selected) => {\r\n    if (disabled) {\r\n        return \"disabled\";\r\n    }\r\n    else if (selected) {\r\n        return \"selected\";\r\n    }\r\n    else if (hover) {\r\n        return \"hover\";\r\n    }\r\n    else {\r\n        return \"normal\";\r\n    }\r\n};\r\nexport class MenuItem extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClick = () => {\r\n            if (!this.props.disabled && this.props.onClick) {\r\n                this.props.onClick();\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        let { disabled, Icon, children, selected } = this.props;\r\n        return React.createElement(\"div\", { onClick: this.handleClick },\r\n            React.createElement(HoverState, null, (hover) => {\r\n                let state = getState(disabled, hover, selected);\r\n                let colorSet = getColorSet(state);\r\n                return React.createElement(StyledBox, { Icon: Icon, iconPlacement: \"left\", colors: colorSet, fullWidth: true, metrics: {\r\n                        fontSize: 12,\r\n                        lineHeight: 14,\r\n                        fontWeight: 400,\r\n                        height: 32,\r\n                        iconSize: 24,\r\n                        letterSpacing: .4,\r\n                        textPaddingTop: 7,\r\n                        textPaddingX: 16\r\n                    } }, children);\r\n            }));\r\n    }\r\n}\r\n//# sourceMappingURL=MenuItem.js.map","import * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nconst StyledInput = styled.input.withConfig({ displayName: \"StyledInput\", componentId: \"sc-b57mcv\" }) `\r\n    pointer-events: none;\r\n    opacity: 0;\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n`;\r\nconst ToggleInputWrapper = styled.div.withConfig({ displayName: \"ToggleInputWrapper\", componentId: \"sc-uv6ghb\" }) `\r\n    padding: 4px 0 4px 24px;\r\n    min-height: 24px;\r\n    box-sizing: border-box;\r\n    position: relative;\r\n`;\r\nconst ToggleInputLabel = styled.label.withConfig({ displayName: \"ToggleInputLabel\", componentId: \"sc-17u0jkn\" }) `\r\n    display: block;\r\n    font-size: 14px;\r\n    font-weight: 400;\r\n    color: ${({ theme, disabled }) => disabled ? theme.colors.base.disabled : theme.colors.base.primary.color};\r\n`;\r\nconst ToggleInputLabelText = styled.div.withConfig({ displayName: \"ToggleInputLabelText\", componentId: \"sc-zwhrcj\" }) `\r\n    margin-left: 4px;\r\n`;\r\nconst ToggleInputIconWrapper = styled.div.withConfig({ displayName: \"ToggleInputIconWrapper\", componentId: \"sc-floyku\" }) `\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    color: ${({ theme, disabled, checked }) => disabled ? theme.colors.base.disabled : checked\r\n    ? theme.colors.base.accent.color : theme.colors.base.primary.color};\r\n`;\r\nexport class ToggleInput extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onChange = (event) => {\r\n            if (this.props.onChange && !this.props.disabled) {\r\n                this.props.onChange(event, this.props.type === \"radio\" || !this.props.checked, this.props.name, this.props.value);\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        let { id, type, name, value, required, disabled, checked, Icon, children } = this.props;\r\n        return (React.createElement(ToggleInputWrapper, null,\r\n            React.createElement(ToggleInputLabel, { disabled: disabled, checked: checked || false },\r\n                React.createElement(ToggleInputIconWrapper, { disabled: disabled, checked: checked || false },\r\n                    React.createElement(StyledInput, { type: type, id: id, name: name, value: value, checked: checked || false, required: required, disabled: disabled, onChange: this.onChange }),\r\n                    Icon(checked || false)),\r\n                children && React.createElement(ToggleInputLabelText, null, children))));\r\n    }\r\n}\r\n//# sourceMappingURL=ToggleInput.js.map","import * as React from \"react\";\r\nimport styled from \"../../../../styled-components\";\r\nimport { GridColumnSelector } from \"./GridColumnSelector\";\r\nconst HeaderSpacer = styled.div.withConfig({ displayName: \"HeaderSpacer\", componentId: \"sc-dfupy1\" }) `\r\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\r\n    background-color: ${props => props.theme.colors.gridEvenRowBg};\r\n    display: flex;\r\n`;\r\nconst HeaderSpacerLeft = styled(HeaderSpacer).withConfig({ displayName: \"HeaderSpacerLeft\", componentId: \"sc-12qtzeq\" }) ``;\r\nconst HeaderSpacerRight = styled(HeaderSpacer).withConfig({ displayName: \"HeaderSpacerRight\", componentId: \"sc-1r6mde\" }) `\r\n    justify-content: flex-end;\r\n`;\r\nconst HeaderVertBorder = styled.div.withConfig({ displayName: \"HeaderVertBorder\", componentId: \"sc-h0ci2y\" }) `\r\n    background-color: ${props => props.theme.colors.gridBorder};\r\n    height: 100%;\r\n    align-self: end;\r\n`;\r\nexport class GridHeader extends React.PureComponent {\r\n    render() {\r\n        const propsChildren = React.Children.toArray(this.props.children);\r\n        const resultChildren = propsChildren.reduce((acc, c, i) => {\r\n            acc.push(React.createElement(\"span\", { key: -i - 1 }, c));\r\n            if (i !== propsChildren.length - 1) {\r\n                acc.push(React.createElement(HeaderVertBorder, { key: i + 1 }));\r\n            }\r\n            return acc;\r\n        }, [\r\n            React.createElement(HeaderSpacerLeft, { key: 0 },\r\n                React.createElement(GridColumnSelector, { onChange: (field) => {\r\n                        this.props.onFieldsChange(field);\r\n                    }, fields: this.props.fields }),\r\n                this.props.extraElements && this.props.extraElements.left)\r\n        ]);\r\n        resultChildren.push(React.createElement(HeaderSpacerRight, { key: propsChildren.length + 1 }, this.props.extraElements && this.props.extraElements.right));\r\n        return resultChildren;\r\n    }\r\n}\r\n//# sourceMappingURL=GridHeader.js.map","import * as React from \"react\";\r\nimport styled from \"../../../styled-components\";\r\nconst GRID_CELL_PADDING_X = 32;\r\nconst GRID_CELL_PADDING_Y = 8;\r\nconst Spacer = styled(\"div\").withConfig({ displayName: \"Spacer\", componentId: \"sc-1ry8zd3\" }) `\r\n    background-color: ${({ odd, theme }) => odd ? theme.colors.gridOddRowBg : theme.colors.gridEvenRowBg};\r\n`;\r\nconst Item = styled(\"div\").withConfig({ displayName: \"Item\", componentId: \"sc-t1lpom\" }) `\r\n    padding: ${GRID_CELL_PADDING_Y}px ${GRID_CELL_PADDING_X}px;\r\n    background-color: ${({ odd, theme }) => odd ? theme.colors.gridOddRowBg : theme.colors.gridEvenRowBg};\r\n`;\r\nconst VertBorder = styled.div.withConfig({ displayName: \"VertBorder\", componentId: \"sc-1dxy4m\" }) `\r\n    background-color: ${props => props.theme.colors.gridBorder};\r\n`;\r\nexport class GridRow extends React.PureComponent {\r\n    render() {\r\n        const propsChildren = React.Children.toArray(this.props.children);\r\n        const resultChildren = propsChildren.reduce((acc, c, i) => {\r\n            acc.push(React.createElement(Item, { odd: this.props.odd, key: -i - 1 }, c));\r\n            if (i !== propsChildren.length - 1) {\r\n                acc.push(React.createElement(VertBorder, { key: i + 1 }));\r\n            }\r\n            return acc;\r\n        }, [\r\n            React.createElement(Spacer, { odd: this.props.odd, key: 0 })\r\n        ]);\r\n        resultChildren.push(React.createElement(Spacer, { odd: this.props.odd, key: propsChildren.length + 1 }));\r\n        return resultChildren;\r\n    }\r\n}\r\n//# sourceMappingURL=GridRow.js.map","import { __decorate } from \"tslib\";\r\nimport * as React from \"react\";\r\nimport styled, { css } from \"../../../../styled-components\";\r\nimport { Label } from \"../../../../data/Label\";\r\nimport { GridSortingOrder } from \"../../state/GridSortingOrder\";\r\nimport { observer } from \"mobx-react\";\r\nconst GridHeaderHitBox = styled.div.withConfig({ displayName: \"GridHeaderHitBox\", componentId: \"sc-1t9uvnh\" }) `\r\n`;\r\nconst HeaderItem = styled(\"div\").withConfig({ displayName: \"HeaderItem\", componentId: \"sc-15pjbl0\" }) `\r\n    background: ${props => props.theme.colors.gridEvenRowBg};\r\n    padding: 10px 8px 10px 32px;\r\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\r\n    cursor: ${props => props.isSortable ? \"pointer\" : \"default\"};\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    ${props => props.isSortable ? css `\r\n        & ${Label} {\r\n            padding: 0;\r\n            ${GridHeaderHitBox}:hover & {\r\n                color: ${props.theme.colors.gridHeaderHover};\r\n            }\r\n        }\r\n    ` : css `\r\n        & ${Label} {\r\n            padding: 0;\r\n        }\r\n    `}\r\n`;\r\nconst ArrowDown = styled.div.withConfig({ displayName: \"ArrowDown\", componentId: \"sc-1dcuvx9\" }) `\r\n    border-top: 5px solid ${props => props.theme.colors.selectBoxArrow};\r\n    border-left: 5px solid transparent;\r\n    border-right: 5px solid transparent;\r\n    margin: 0 7px;\r\n    ${GridHeaderHitBox}:hover & {\r\n        border-top-color: ${props => props.theme.colors.gridHeaderHover};;\r\n    }\r\n`;\r\nconst ArrowUp = styled.div.withConfig({ displayName: \"ArrowUp\", componentId: \"sc-pmevxn\" }) `\r\n    border-bottom: 5px solid ${props => props.theme.colors.selectBoxArrow};\r\n    border-left: 5px solid transparent;\r\n    border-right: 5px solid transparent;\r\n    margin: 0 7px;\r\n    ${GridHeaderHitBox}:hover & {\r\n        border-bottom-color: ${props => props.theme.colors.gridHeaderHover};;\r\n    }\r\n`;\r\nconst NoArrow = styled.div.withConfig({ displayName: \"NoArrow\", componentId: \"sc-1o7zin9\" }) `\r\n    width: 24px;\r\n`;\r\nlet GridHeaderItem = class GridHeaderItem extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onClick = () => {\r\n            if (this.props.onClick) {\r\n                this.props.onClick(this.props.field);\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return (React.createElement(GridHeaderHitBox, null,\r\n            React.createElement(HeaderItem, { onClick: this.onClick, isSortable: this.props.field.isSortable },\r\n                React.createElement(Label, null, this.props.children),\r\n                this.getHeaderSortArrow())));\r\n    }\r\n    getHeaderSortArrow() {\r\n        if (!this.props.sortingOptions || this.props.sortingOptions.field !== this.props.field) {\r\n            return React.createElement(NoArrow, null);\r\n        }\r\n        if (this.props.sortingOptions.order === GridSortingOrder.Ascending) {\r\n            return React.createElement(ArrowUp, null);\r\n        }\r\n        if (this.props.sortingOptions.order === GridSortingOrder.Descending) {\r\n            return React.createElement(ArrowDown, null);\r\n        }\r\n        return React.createElement(NoArrow, null);\r\n    }\r\n};\r\nGridHeaderItem = __decorate([\r\n    observer\r\n], GridHeaderItem);\r\nexport { GridHeaderItem };\r\n//# sourceMappingURL=GridHeaderItem.js.map","import * as React from \"react\";\r\nimport styled from \"../../../styled-components\";\r\nconst Wrapper = styled.div.withConfig({ displayName: \"Wrapper\", componentId: \"sc-1329wqe\" }) `\r\n    border-top: 1px solid ${props => props.theme.colors.gridBorder};\r\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\r\n`;\r\nexport const GridWrapper = ({ children }) => (React.createElement(Wrapper, null, children));\r\n//# sourceMappingURL=GridWrapper.js.map","import styled from \"../../../styled-components\";\r\nexport const GridData = styled(\"div\").withConfig({ displayName: \"GridData\", componentId: \"sc-1k2qfqp\" }) `\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: ${({ dataType }) => dataType === \"number\" ? \"flex-end\" : \"auto\"};\r\n`;\r\n//# sourceMappingURL=GridData.js.map","import { __decorate } from \"tslib\";\r\nimport * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable } from \"mobx\";\r\nimport { GridLayout } from \"./internal/GridLayout\";\r\nimport { GridSortingOrder } from \"./state/GridSortingOrder\";\r\nimport { GridHeader } from \"./internal/header/GridHeader\";\r\nimport { GridRow } from \"./internal/GridRow\";\r\nimport { GridHeaderItem } from \"./internal/header/GridHeaderItem\";\r\nimport { GridWrapper } from \"./internal/GridWrapper\";\r\nimport { GridData } from \"./internal/GridData\";\r\nconst LoadMoreRows = styled.div.withConfig({ displayName: \"LoadMoreRows\", componentId: \"sc-1y1ghry\" }) `\r\n    text-align: center;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    padding: 8px;\r\n    cursor: pointer;\r\n`;\r\nconst NoRowsAvailable = styled.div.withConfig({ displayName: \"NoRowsAvailable\", componentId: \"sc-era9me\" }) `\r\n    text-align: center;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    padding: 8px;\r\n`;\r\nlet Grid = class Grid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.dataItemRenderer = (f, row) => {\r\n            if (f.renderer) {\r\n                return (React.createElement(GridData, { key: f.fieldKey, dataType: f.type }, typeof f.renderer === \"function\" ?\r\n                    f.renderer(row.data) :\r\n                    f.renderer.render(row.data)));\r\n            }\r\n            let data = f.getFieldValue(row.data).toString();\r\n            return (React.createElement(GridData, { key: f.fieldKey, dataType: f.type }, data));\r\n        };\r\n        this.changeSorting = (field) => {\r\n            if (this.props.sortingOptions.field !== field) {\r\n                this.props.sortingOptions.setAscendingOrder();\r\n            }\r\n            else {\r\n                this.props.sortingOptions.setNextOrder();\r\n            }\r\n            if (field !== undefined) {\r\n                this.props.sortingOptions.field = field;\r\n            }\r\n        };\r\n        this.setColumnSelect = (field) => {\r\n            this.props.fields.setColumnSelect(field.fieldKey, !field.selected);\r\n        };\r\n        this.loadMoreRows = () => {\r\n            if (this.visibleRows < this.props.rows.length) {\r\n                this.visibleRows += 50;\r\n            }\r\n        };\r\n        this.updateVisibleRows();\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.limitRows !== prevProps.limitRows || this.props.maxVisibleRows !== prevProps.maxVisibleRows) {\r\n            this.updateVisibleRows();\r\n        }\r\n    }\r\n    updateVisibleRows() {\r\n        this.visibleRows = this.props.limitRows ? this.props.maxVisibleRows : Number.POSITIVE_INFINITY;\r\n    }\r\n    render() {\r\n        const sortedRows = this.getSortedRows();\r\n        return (React.createElement(React.Fragment, null,\r\n            React.createElement(GridWrapper, null,\r\n                React.createElement(GridLayout, { numberOfFields: this.props.fields.selectedGridFields.length },\r\n                    React.createElement(GridHeader, { onFieldsChange: this.setColumnSelect, fields: this.props.fields.gridFields, extraElements: this.props.extraHeaderElements }, this.props.fields.selectedGridFields.map(f => {\r\n                        return (React.createElement(GridHeaderItem, { key: f.fieldKey, field: f, onClick: f.isSortable ? this.changeSorting : undefined, sortingOptions: this.props.sortingOptions }, f.label));\r\n                    })),\r\n                    sortedRows.slice(0, this.visibleRows).map((row, idx) => {\r\n                        return (React.createElement(GridRow, { odd: !(idx % 2), key: row.key }, this.props.fields.selectedGridFields.map((f) => {\r\n                            return this.dataItemRenderer(f, row);\r\n                        })));\r\n                    }))),\r\n            this.visibleRows < this.props.rows.length ?\r\n                React.createElement(LoadMoreRows, { onClick: this.loadMoreRows }, this.props.loadMoreText)\r\n                : null,\r\n            this.props.rows.length === 0 ?\r\n                React.createElement(NoRowsAvailable, null, this.props.noDataText)\r\n                : null));\r\n    }\r\n    getSortedRows() {\r\n        const sortOpts = this.props.sortingOptions;\r\n        if (sortOpts.field === undefined ||\r\n            sortOpts.order === GridSortingOrder.Default) {\r\n            return this.props.rows;\r\n        }\r\n        return [...this.props.rows].sort((a, b) => {\r\n            if (sortOpts.field === undefined ||\r\n                sortOpts.order === GridSortingOrder.Default) {\r\n                return -1;\r\n            }\r\n            const aValue = sortOpts.field.getFieldValue(a.data);\r\n            const bValue = sortOpts.field.getFieldValue(b.data);\r\n            const compResult = typeof aValue !== \"string\" && typeof aValue !== \"number\" ?\r\n                aValue.comparedTo(bValue) :\r\n                this.defaultComparator(aValue, bValue);\r\n            if (sortOpts.order === GridSortingOrder.Ascending) {\r\n                return compResult;\r\n            }\r\n            else {\r\n                return compResult * -1;\r\n            }\r\n        });\r\n    }\r\n    defaultComparator(a, b) {\r\n        if (a === b) {\r\n            return 0;\r\n        }\r\n        if (a < b) {\r\n            return -1;\r\n        }\r\n        return 1;\r\n    }\r\n};\r\nGrid.defaultProps = {\r\n    maxVisibleRows: 50,\r\n    limitRows: true\r\n};\r\n__decorate([\r\n    observable\r\n], Grid.prototype, \"visibleRows\", void 0);\r\nGrid = __decorate([\r\n    observer\r\n], Grid);\r\nexport { Grid };\r\n//# sourceMappingURL=Grid.js.map","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { splitLongHash } from \"../util/internal/hash\";\r\nconst HiddenHashPartWrapper = styled.span.withConfig({ displayName: \"HiddenHashPartWrapper\", componentId: \"sc-4zoryo\" }) `\r\n    &:before {\r\n        content: \" ... \";\r\n    }\r\n`;\r\nconst HiddenHashPart = styled.strong.withConfig({ displayName: \"HiddenHashPart\", componentId: \"sc-1uf7egn\" }) `\r\n    display: inline-block;\r\n    width: 0;\r\n    height: 0;\r\n    opacity: 0;\r\n    pointer-events: none;\r\n    font-size: 0;\r\n`;\r\nexport class Hash extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleCopy = (e) => {\r\n            e.preventDefault();\r\n            e.clipboardData.setData(\"text/plain\", \"0x\" + this.props.children);\r\n        };\r\n    }\r\n    render() {\r\n        let { children } = this.props;\r\n        let hash = \"0x\" + children.replace(/^0x/, \"\");\r\n        let chars = this.props.ellipsisChars;\r\n        let hashParts = splitLongHash(hash, this.props.ellipsisThreshold, chars);\r\n        return React.createElement(\"span\", { onCopy: this.handleCopy }, !this.props.useEllipsis || !hashParts ?\r\n            hash :\r\n            React.createElement(React.Fragment, null,\r\n                hashParts[0],\r\n                React.createElement(HiddenHashPartWrapper, null,\r\n                    React.createElement(HiddenHashPart, null, hashParts[1])),\r\n                hashParts[2]));\r\n    }\r\n}\r\nHash.defaultProps = {\r\n    ellipsisThreshold: 20,\r\n    ellipsisChars: 6,\r\n    useEllipsis: true\r\n};\r\n//# sourceMappingURL=Hash.js.map","import styled, { css } from \"../styled-components\";\r\nimport * as React from \"react\";\r\nconst $Label = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nexport const Label = styled($Label).withConfig({ displayName: \"Label\", componentId: \"sc-1npcbvl\" }) `\r\n    font-size: 12px;\r\n    line-height: 12px;\r\n    height: 12px;\r\n    text-transform: ${props => props.uppercase ? \"uppercase\" : \"none\"};\r\n    background-color: ${props => (props.arrow ?\r\n    (props.disabled ? props.theme.colors.label.disabled : props.theme.colors.base.highlight.color) :\r\n    \"transparent\")};\r\n    font-weight: 600;\r\n    letter-spacing: .5px;\r\n    padding: 4px 8px;\r\n    margin-right: ${props => props.arrow ? \"10px\" : \"0\"};\r\n    color: ${props => (props.arrow ?\r\n    props.theme.colors.base.highlight.contrast :\r\n    props.strong ?\r\n        (props.disabled ? props.theme.colors.label.disabled : props.theme.colors.label.strong) :\r\n        props.disabled ? props.theme.colors.label.disabled : props.theme.colors.label.default)};\r\n\r\n    /**\r\n     * When is the first label in a row the width of the container (LayoutRowItemWrapper) is 200px + 2*8px padding,\r\n     * and the display: flex along with justify-content: flex-end ensures that the label is right aligned.\r\n     * However, if the label is long enough (bigger than 200px) to wrap, the Label div will occupy all the container\r\n     * width, and the text will be aligned to right thanks to the rule below.\r\n     */\r\n    text-align: right;\r\n\r\n    ${props => props.arrow ? css `\r\n    position: relative;\r\n    &::before {\r\n        content: \"\";\r\n        position: absolute;\r\n        top: 0;\r\n        right: -10px;\r\n        border-top: 10px solid transparent;\r\n        border-bottom: 10px solid transparent;\r\n        border-left: 10px solid ${props.disabled ?\r\n    props.theme.colors.label.disabled :\r\n    props.theme.colors.base.highlight.color};\r\n        transform: scaleX(.8);\r\n        transform-origin: center left;\r\n    }\r\n    ` : \"\"}\r\n`;\r\nLabel.defaultProps = {\r\n    uppercase: true\r\n};\r\n//# sourceMappingURL=Label.js.map","import styled, { css } from \"../../../styled-components\";\r\nimport * as React from \"react\";\r\nconst IconRoot = styled.div.withConfig({ displayName: \"IconRoot\", componentId: \"sc-1x8jexb\" }) `\r\n    display: block;\r\n    /* Let the parent element handle mouse events (\r\n        because SVG is special and causes problems when used in menu layer with document click outside detection\r\n    ) */\r\n    pointer-events: none;\r\n`;\r\nconst ContentRoot = styled(\"div\").withConfig({ displayName: \"ContentRoot\", componentId: \"sc-1h36b7j\" }) `\r\n    padding-top: ${props => props.paddingTop}px;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n\r\n    ${props => props.fullWidth ? css `\r\n    width: 100%;\r\n    ` : ``}\r\n`;\r\nconst $Box = ({ children, className, Icon, iconPlacement, metrics, fullWidth }) => {\r\n    let icon = Icon ?\r\n        React.createElement(IconRoot, null,\r\n            React.createElement(Icon, { size: metrics.iconSize }))\r\n        : null;\r\n    let iconIsLeft = iconPlacement === \"left\";\r\n    return React.createElement(\"div\", { className: className },\r\n        iconIsLeft && icon,\r\n        children !== void 0 ?\r\n            React.createElement(ContentRoot, { fullWidth: fullWidth, paddingTop: metrics.textPaddingTop }, children)\r\n            : null,\r\n        !iconIsLeft && icon);\r\n};\r\nconst getColors = (colors, theme) => {\r\n    if (typeof colors === \"function\") {\r\n        return colors(theme);\r\n    }\r\n    return colors;\r\n};\r\nconst BORDER_WIDTH = 1;\r\nexport const Box = styled($Box).withConfig({ displayName: \"Box\", componentId: \"sc-p4qq1s\" }) `\r\n    display: flex;\r\n    font-size: ${props => props.metrics.fontSize}px;\r\n    line-height: ${props => props.metrics.lineHeight}px;\r\n    height: ${props => props.metrics.height}px;\r\n\r\n    ${props => props.fullWidth ? css `\r\n    width: 100%;\r\n    ` : ``}\r\n\r\n    padding: 0 ${props => props.metrics.textPaddingX - BORDER_WIDTH}px;\r\n\r\n    ${props => {\r\n    if (!props.Icon) {\r\n        return;\r\n    }\r\n    let hasText = props.children !== void 0;\r\n    let iconTextSpacing = Math.floor(props.metrics.textPaddingX / 2);\r\n    let iconMarginY = Math.max(0, (props.metrics.height - props.metrics.iconSize) / 2 - BORDER_WIDTH);\r\n    let iconMarginX = hasText ? iconTextSpacing : iconMarginY;\r\n    let iconIsLeft = props.iconPlacement === \"left\";\r\n    return css `\r\n            ${iconIsLeft ? css `\r\n                padding-left: ${iconMarginX}px;\r\n                    ${!hasText ? css `\r\n                    padding-right: ${iconMarginX}px;\r\n                    ` : ``}\r\n                ` : css `\r\n                padding-right: ${iconMarginX}px;\r\n                    ${!hasText ? css `\r\n                    padding-left: ${iconMarginX}px;\r\n                    ` : ``}\r\n            `}\r\n\r\n            & ${IconRoot} {\r\n                margin-top: ${iconMarginY}px;\r\n\r\n                ${hasText ? css `\r\n                    ${iconIsLeft ? css `\r\n                        margin-right: ${iconTextSpacing}px;\r\n                        ` : css `\r\n                        margin-left: ${iconTextSpacing}px;`}\r\n                ` : ``}\r\n            }\r\n        `;\r\n}}\r\n\r\n    font-weight: ${props => props.metrics.fontWeight};\r\n    letter-spacing: ${props => props.metrics.letterSpacing};\r\n    box-sizing: border-box;\r\n    vertical-align: middle;\r\n\r\n    border: ${BORDER_WIDTH}px ${props => (props.borderStyle || \"solid\")} ${props => (getColors(props.colors, props.theme).border ||\r\n    getColors(props.colors, props.theme).background ||\r\n    \"transparent\")};\r\n    border-radius: ${props => props.theme.spacing.borderRadius.thin}px;\r\n    background-color: ${props => (getColors(props.colors, props.theme).background || \"transparent\")};\r\n    color: ${props => getColors(props.colors, props.theme).text};\r\n`;\r\n//# sourceMappingURL=Box.js.map","import * as React from \"react\";\r\nimport styled, { withTheme } from \"../styled-components\";\r\nconst IconButtonRoot = styled(\"button\").withConfig({ displayName: \"IconButtonRoot\", componentId: \"sc-1ojxw7\" }) `\r\n    display: block;\r\n    background-color: transparent;\r\n    border: none; /* Remove borders */\r\n    color: ${({ buttonColor, theme }) => buttonColor};\r\n    cursor: pointer;\r\n    outline: none;\r\n    padding: 0px;\r\n`;\r\nclass $IconButton extends React.Component {\r\n    render() {\r\n        let Icon = this.props.Icon;\r\n        let theme = this.props.theme;\r\n        let iconSize = this.props.iconSize;\r\n        let color = typeof this.props.color === \"function\" ? this.props.color(theme) : this.props.color;\r\n        return (React.createElement(IconButtonRoot, { onClick: this.props.onClick, className: this.props.className, buttonColor: color },\r\n            React.createElement(Icon, { color: color, size: iconSize })));\r\n    }\r\n}\r\nexport const IconButton = withTheme($IconButton);\r\n//# sourceMappingURL=IconButton.js.map"],"mappings":"AAEA;;;ACEA;;;;ACFA;ACIA;AAAA;AAIA;;;AAJA;;;;AAAA;;;;AAAA;;;;AAAA;;;AAuBA;;ACzBA;;AAEA;AACA;;AAEA;;AAGA;;ACLA;;;;;;;ACGA;;;;;AAMA;;;;AAIA;AAEA;;AAGA;;;;AAIA;AAGA;AC5BA;AACA;;AAGA;;AAIA;AACA;;;AAIA;ACZA;AAEA;AAJA;AAMA;AAEA;AACA;AAEA;ACNA;AACA;;AAEA;AACA;;;;;AAKA;AACA;;AAEA;AACA;;;AAGA;AACA;;;;AAKA;AACA;;;;AAIA;AACA;;AAGA;AACA;;;;AAIA;AACA;;AAGA;;AAGA;AChDA;AACA;AAEA;;;;ACDA;ACLA;;;;;;AAmBA;;;;;AAMA;;;;ACjBA;;;;;;;AAQA;;;;ACTA;AACA;;;;AAMA;AACA;AACA;;;;;;;;;AAaA;;;;;;;;;AASA;;;;AAMA;AAEA;;;;;;ACrCA;AACA;;;;;AAKA;;AAEA;AAeA;;AASA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;AACA;;;;AAjDA;AAwDA;AACA;AACA;AChGA;;;;AAMA;;;;AAeA","sourceRoot":""}