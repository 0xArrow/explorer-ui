{"version":3,"file":"14.806662722e3b5374da54.bundle.js","sources":["webpack:///./src/blockTxs/txHighlight/HighlightFields.ts","webpack:///./node_modules/@alethio/ui/lib/control/expander/ExpanderBaseIcon.js","webpack:///./node_modules/@alethio/ui/lib/control/expander/ExpanderBase.js"],"sourcesContent":["import { observable, action } from \"mobx\";\nimport { BigNumber } from \"@alethio/ui/lib/util/BigNumber\";\nimport { ITranslation } from \"plugin-api/ITranslation\";\n\ninterface IHighlightField<TTxData, THighlightFieldKey extends string> {\n    key: THighlightFieldKey;\n    getLabel(t: ITranslation): string;\n    getData(t: TTxData): number | BigNumber;\n}\n\nexport class HighlightFields<TTxData, THighlightFieldKey extends string> {\n    protected fields: IHighlightField<TTxData, THighlightFieldKey>[];\n\n    @observable\n    protected selectedField: IHighlightField<TTxData, THighlightFieldKey>;\n\n    getFields() {\n        return this.fields;\n    }\n\n    getSelectedField() {\n        return this.selectedField;\n    }\n\n    @action setSelectedField(key: string) {\n        const field = this.fields.find((f: IHighlightField<TTxData, THighlightFieldKey>) => {\n            return key === f.key;\n        });\n        if (field) {\n            this.selectedField = field;\n        }\n    }\n}\n","import * as React from \"react\";\r\nimport styled, { css } from \"../../styled-components\";\r\nimport { ArrowDownIcon } from \"../../icon/ArrowDownIcon\";\r\nconst ExpanderIconRoot = styled(\"div\").withConfig({ displayName: \"ExpanderIconRoot\", componentId: \"sc-15ubz3y\" }) `\n    display: inline-block;\n    color: ${props => props.expanded ? props.theme.colors.expanderOpenIcon : props.theme.colors.expanderIcon};\n    padding: 2px 8px 2px 8px;\n    ${props => props.getColor ? css `\n    background-color: ${(props.getColor(props.theme))}\n    border: 1px solid ${(props.getColor(props.theme))}\n    border-radius: 0 2px 2px 0;\n    ` : ``}\n`;\r\nconst Icon = styled(\"div\").withConfig({ displayName: \"Icon\", componentId: \"sc-7y2jrc\" }) `\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: transform .2s ease-in-out;\n    ${props => props.expanded ? css `\n    transform: rotate(-180deg);\n    ` : ``}\n`;\r\nexport class ExpanderBaseIcon extends React.PureComponent {\r\n    render() {\r\n        return (React.createElement(ExpanderIconRoot, Object.assign({}, this.props),\r\n            React.createElement(Icon, Object.assign({}, this.props),\r\n                React.createElement(ArrowDownIcon, null))));\r\n    }\r\n}\r\n//# sourceMappingURL=ExpanderBaseIcon.js.map","import * as React from \"react\";\r\nimport styled, { css } from \"../../styled-components\";\r\nimport { Number } from \"../../data/Number\";\r\nimport { ExpanderBaseIcon } from \"./ExpanderBaseIcon\";\r\nconst getColors = (colors, theme) => {\r\n    if (typeof colors === \"function\") {\r\n        return colors(theme);\r\n    }\r\n    return colors;\r\n};\r\nconst ExpanderRoot = styled(\"div\").withConfig({ displayName: \"ExpanderRoot\", componentId: \"sc-15uud0b\" }) `\n    display: flex;\n    cursor: ${props => props.disabled ? \"default\" : \"pointer\"};\n    user-select: none;\n    box-shadow: 0 2px 6px 0 rgba(0,0,0,0.04);\n    transition: background-color .2s ease-in-out, border-color .2s ease-in-out;\n\n    font-size: ${props => props.theme.spacing.expander.fontSize}px;\n    line-height: ${props => props.theme.spacing.expander.lineHeight}px;\n    font-weight: ${props => props.theme.spacing.expander.fontWeight};\n    letter-spacing: ${props => props.theme.spacing.expander.letterSpacing};\n\n    border: 1px solid ${props => (getColors(props.colors, props.theme).border ||\r\n    getColors(props.colors, props.theme).background ||\r\n    \"transparent\")};\n    border-radius: ${props => props.theme.spacing.borderRadius.thin}px;\n    align-items: center;\n    color: ${props => getColors(props.colors, props.theme).text};\n    background-color: ${props => (getColors(props.colors, props.theme).background || \"transparent\")};\n\n    & > * { margin-left: 16px;}\n`;\r\nconst ExpanderLabel = styled(\"div\").withConfig({ displayName: \"ExpanderLabel\", componentId: \"sc-2fxby7\" }) `\n    ${props => props.fullWidth ? css `\n    width: 100%;\n    ` : ``}\n    margin-right: 20px;\n`;\r\nconst ExpanderValue = styled(\"span\").withConfig({ displayName: \"ExpanderValue\", componentId: \"sc-1ux38r5\" }) `\n    color: ${props => props.disabled ?\r\n    props.theme.colors.expanderDisabled :\r\n    props.open ? props.theme.colors.expanderOpenValue : props.theme.colors.expanderValue};\n    margin-left: 8px; /* these could be also 16px */\n    margin-right: 8px; /* these could be also 16px */\n`;\r\nconst ExpanderContent = styled(\"div\").withConfig({ displayName: \"ExpanderContent\", componentId: \"sc-ge5xjv\" }) `\n    display: flex;\n    align-items: center;\n    ${props => props.fullWidth ? css `\n    width: 100%;\n\n    & ${ExpanderValue} {\n        flex-grow: 1;\n        text-align: right;\n    }\n    ` : ``}\n`;\r\nconst hasPropsWithValue = (props) => {\r\n    return props.value !== void 0;\r\n};\r\nexport class ExpanderBase extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleClick = () => {\r\n            if (this.props.onClick && !this.props.disabled) {\r\n                this.props.onClick();\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        let value;\r\n        let locale;\r\n        if (hasPropsWithValue(this.props)) {\r\n            value = this.props.value;\r\n            locale = this.props.locale;\r\n        }\r\n        let { label, open, disabled, colors, iconColor: iconColor } = this.props;\r\n        return (React.createElement(ExpanderRoot, { onClick: this.handleClick, disabled: disabled, colors: colors },\r\n            React.createElement(ExpanderContent, { fullWidth: this.props.fullWidth },\r\n                React.createElement(ExpanderLabel, { fullWidth: this.props.fullWidth }, label),\r\n                value !== void 0 ?\r\n                    React.createElement(ExpanderValue, { open: open, disabled: disabled },\r\n                        React.createElement(Number, { locale: locale, value: value }))\r\n                    : null,\r\n                React.createElement(ExpanderBaseIcon, { expanded: open, getColor: iconColor }))));\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.label !== this.props.label ||\r\n            prevProps.value !== this.props.value) {\r\n            const onResize = this.props.onResize;\r\n            if (onResize) {\r\n                setTimeout(onResize);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ExpanderBase.js.map"],"mappings":"AAUA;;ACLA;;AAEA;AACA;AACA;;AAEA;AAEA;;;;;AAKA;;AAEA;AAEA;;ACVA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;;AAGA;AACA;;;AAMA;;;AAGA;;;AAGA;;;;AAIA;AAEA","sourceRoot":""}