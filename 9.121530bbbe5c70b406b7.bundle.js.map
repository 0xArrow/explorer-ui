{"version":3,"file":"9.121530bbbe5c70b406b7.bundle.js","sources":["webpack:///./src/blockTxs/ViewSelectorButton.tsx","webpack:///./src/blockTxs/ViewSelectorBox.tsx"],"sourcesContent":["import styled from \"../styled-components\";\nimport * as React from \"react\";\n\nconst HEIGHT = 32;\nconst WIDTH = 40;\ninterface IViewSelectorButtonProps {\n    active?: boolean;\n    className?: string;\n    borderRadiusPos?: \"left\" | \"right\";\n    onClick?(): void;\n}\nconst $ViewSelectorButton: React.StatelessComponent<IViewSelectorButtonProps> = ({ children, className, onClick }) => (\n    <div className={className} onClick={onClick}>{children}</div>\n);\nexport const ViewSelectorButton = styled($ViewSelectorButton)`\n    height: ${HEIGHT}px;\n    width: ${WIDTH}px;\n    box-sizing: border-box;\n    border-radius: ${({borderRadiusPos}) =>\n        borderRadiusPos === \"left\" ?  \"0px 4px 4px 0px\" : borderRadiusPos === \"right\" ? \"4px 0px 0px 4px\" : \"\"};\n    cursor: pointer;\n    padding: 3px 0 0 7px;\n    border: 1px solid ${({active, theme}) =>\n        active ? theme.colors.base.secondary.color : theme.colors.base.secondary.contrast};\n    background-color: ${({active, theme}) =>\n        active ? theme.colors.base.secondary.color : theme.colors.base.secondary.contrast};\n    color: ${({active, theme}) =>\n        active ? theme.colors.base.secondary.contrast : theme.colors.base.secondary.color};\n    &:hover {\n        border: 1px solid ${({theme}) => theme.colors.base.secondary.color};\n        background-color: ${({theme}) => theme.colors.base.secondary.color};\n        color: ${({theme}) => theme.colors.base.secondary.contrast};\n    }\n`;\ntry {\n    // @ts-ignore\n    ViewSelectorButton.displayName = \"ViewSelectorButton\";\n    // @ts-ignore\n    ViewSelectorButton.__docgenInfo = { \"description\": \"\", \"displayName\": \"ViewSelectorButton\", \"props\": { \"className\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"className\", \"required\": false, \"type\": { \"name\": \"string | undefined\" } }, \"onClick\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onClick\", \"required\": false, \"type\": { \"name\": \"(() => void) | undefined\" } }, \"active\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"active\", \"required\": false, \"type\": { \"name\": \"boolean | undefined\" } }, \"borderRadiusPos\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"borderRadiusPos\", \"required\": false, \"type\": { \"name\": \"\\\"left\\\" | \\\"right\\\" | undefined\" } }, \"theme\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"ITheme | undefined\" } }, \"innerRef\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"innerRef\", \"required\": false, \"type\": { \"name\": \"((instance: any) => void) | RefObject<HTMLElement | SVGElement | Component<{}, {}, any>> | undefined\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/blockTxs/ViewSelectorButton.tsx#ViewSelectorButton\"] = { docgenInfo: ViewSelectorButton.__docgenInfo, name: \"ViewSelectorButton\", path: \"src/blockTxs/ViewSelectorButton.tsx#ViewSelectorButton\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }","import styled from \"@alethio/ui/lib/styled-components\";\nimport * as React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { ViewSelectorButton } from \"./ViewSelectorButton\";\nimport { TxsViewMode } from \"./TxsViewMode\";\nimport { ListViewIcon } from \"@alethio/ui/lib/icon/ListViewIcon\";\nimport { GridViewIcon } from \"@alethio/ui/lib/icon/GridViewIcon\";\n\nconst HEIGHT = 32;\nconst ViewSelectorRoot = styled.div`\n    padding: 0 7px;\n    display: flex;\n    width: ${2 * HEIGHT + 16}px;\n    justify-content: space-between;\n`;\n\ninterface IViewSelectorBoxProps {\n    txsViewMode: TxsViewMode;\n}\n\n@observer\nexport class ViewSelectorBox extends React.Component<IViewSelectorBoxProps> {\n    private onListClick = () => {\n        this.props.txsViewMode.setToTableList();\n    }\n    private onGridClick = () => {\n        this.props.txsViewMode.setToHeatMapGrid();\n    }\n    render() {\n        return (\n            <ViewSelectorRoot>\n                <ViewSelectorButton\n                    active={this.props.txsViewMode.isHeatMapGrid}\n                    onClick={this.onGridClick}\n                    borderRadiusPos=\"right\">\n                    <GridViewIcon />\n                </ViewSelectorButton>\n                <ViewSelectorButton\n                    active={this.props.txsViewMode.isTableList}\n                    onClick={this.onListClick}\n                    borderRadiusPos=\"left\">\n                    <ListViewIcon />\n                </ViewSelectorButton>\n            </ViewSelectorRoot>\n        );\n    }\n}\ntry {\n    // @ts-ignore\n    ViewSelectorBox.displayName = \"ViewSelectorBox\";\n    // @ts-ignore\n    ViewSelectorBox.__docgenInfo = { \"description\": \"\", \"displayName\": \"ViewSelectorBox\", \"props\": { \"txsViewMode\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"txsViewMode\", \"required\": true, \"type\": { \"name\": \"TxsViewMode\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/blockTxs/ViewSelectorBox.tsx#ViewSelectorBox\"] = { docgenInfo: ViewSelectorBox.__docgenInfo, name: \"ViewSelectorBox\", path: \"src/blockTxs/ViewSelectorBox.tsx#ViewSelectorBox\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAGA;AAAA;AACA;;AAcA;;;AAIA;AAEA;AAEA;;AAGA;AACA;AACA;;AAGA;;;ACtBA;;AASA","sourceRoot":""}