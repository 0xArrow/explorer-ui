{"version":3,"file":"6.619ce1eabe43dcdeeab0.bundle.js","sources":["webpack:///./node_modules/@alethio/ui/lib/control/grid/state/GridFields.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridLayout.js","webpack:///./node_modules/@alethio/ui/lib/icon/CheckboxOnIcon.js","webpack:///./node_modules/@alethio/ui/lib/control/Checkbox.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/header/GridColumnSelector.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/header/GridHeader.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridRow.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/header/GridHeaderItem.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridWrapper.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/internal/GridData.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/Grid.js","webpack:///./node_modules/@alethio/ui/lib/data/Hash.js","webpack:///./node_modules/@alethio/ui/lib/data/Label.js","webpack:///./node_modules/@alethio/ui/lib/control/grid/state/GridSortingOrder.js","webpack:///./node_modules/@alethio/ui/lib/control/ModalSelectBox.js","webpack:///./node_modules/@alethio/ui/lib/control/SelectBox.js"],"sourcesContent":["import * as tslib_1 from \"tslib\";\r\nimport { observable, computed, action } from \"mobx\";\r\nexport class GridFields {\r\n    get gridFields() {\r\n        return this.fields;\r\n    }\r\n    get selectedGridFields() {\r\n        return this.fields.filter(f => f.selected);\r\n    }\r\n    setColumnSelect(key, select) {\r\n        const field = this.fields.find((f) => {\r\n            return key === f.fieldKey;\r\n        });\r\n        if (field) {\r\n            field.selected = select;\r\n        }\r\n    }\r\n    get defaultSortedField() {\r\n        return void 0;\r\n    }\r\n}\r\ntslib_1.__decorate([\r\n    observable\r\n], GridFields.prototype, \"fields\", void 0);\r\ntslib_1.__decorate([\r\n    computed\r\n], GridFields.prototype, \"gridFields\", null);\r\ntslib_1.__decorate([\r\n    computed\r\n], GridFields.prototype, \"selectedGridFields\", null);\r\ntslib_1.__decorate([\r\n    action\r\n], GridFields.prototype, \"setColumnSelect\", null);\r\n//# sourceMappingURL=GridFields.js.map","import styled from \"../../../styled-components\";\r\nexport const GridLayout = styled(\"div\") `\r\n    overflow-x: auto;\r\n    display: grid;\r\n    grid-template-columns: auto ${({ numberOfFields }) => {\r\n    if (numberOfFields === 0) {\r\n        return \"\";\r\n    }\r\n    if (numberOfFields === 1) {\r\n        return \"max-content\";\r\n    }\r\n    const repeatTimes = numberOfFields - 1;\r\n    return \"repeat( \" + repeatTimes + \", max-content 1px) max-content\";\r\n}} auto;\r\n    font-size: 14px;\r\n    font-weight: 500;\r\n    letter-spacing: .2px;\r\n`;\r\n//# sourceMappingURL=GridLayout.js.map","import * as React from \"react\";\r\nimport { SvgIcon } from \"../util/react/SvgIcon\";\r\nexport class CheckboxOnIcon extends React.Component {\r\n    render() {\r\n        return (React.createElement(SvgIcon, Object.assign({}, this.props),\r\n            React.createElement(\"g\", { stroke: \"none\", strokeWidth: \"1\", fill: \"none\", fillRule: \"evenodd\" },\r\n                React.createElement(\"polygon\", { points: \"0 0 24 0 24 24 0 24\" }),\r\n                React.createElement(\"path\", { d: \"M9.1277704,4 L14.8722296,4 C16.6552671,4 17.3018396,4.18565122 17.9536914,4.53426541 C18.6055433,4.88287959 19.1171204,5.39445674 19.4657346,6.04630859 C19.8143488,6.69816044 20,7.34473292 20,9.1277704 L20,14.8722296 C20,16.6552671 19.8143488,17.3018396 19.4657346,17.9536914 C19.1171204,18.6055433 18.6055433,19.1171204 17.9536914,19.4657346 C17.3018396,19.8143488 16.6552671,20 14.8722296,20 L9.1277704,20 C7.34473292,20 6.69816044,19.8143488 6.04630859,19.4657346 C5.39445674,19.1171204 4.88287959,18.6055433 4.53426541,17.9536914 C4.18565122,17.3018396 4,16.6552671 4,14.8722296 L4,9.1277704 C4,7.34473292 4.18565122,6.69816044 4.53426541,6.04630859 C4.88287959,5.39445674 5.39445674,4.88287959 6.04630859,4.53426541 C6.69816044,4.18565122 7.34473292,4 9.1277704,4 Z M15,8.5 L10.51,13 L8.5,11 L7,12.5 L10.51,16 L16.5,10 L15,8.5 Z\", fill: \"currentColor\", fillRule: \"nonzero\" }))));\r\n    }\r\n}\r\n//# sourceMappingURL=CheckboxOnIcon.js.map","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { CheckboxOnIcon } from \"../icon/CheckboxOnIcon\";\r\nimport { CheckboxOffIcon } from \"../icon/CheckboxOffIcon\";\r\nconst CheckboxWrapper = styled.div `\r\n    padding: 8px 8px 8px 32px;\r\n    position: relative;\r\n`;\r\nconst CheckboxLabel = styled.label `\r\n    text-transform: uppercase;\r\n    display: block;\r\n    font-size: 12px;\r\n    line-height: 16px;\r\n    font-weight: 600;\r\n    color: ${({ theme }) => theme.colors.checkboxLabel};\r\n`;\r\nconst CheckboxIconWrapper = styled.div `\r\n    position: absolute;\r\n    top: 4px;\r\n    left: 4px;\r\n    color: ${({ theme }) => theme.colors.checkboxIcon};\r\n`;\r\nexport class Checkbox extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onChange = (event) => {\r\n            if (this.props.onChange) {\r\n                this.props.onChange(event, !this.props.checked, this.props.name, this.props.value);\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return (React.createElement(CheckboxWrapper, null,\r\n            React.createElement(\"input\", { type: \"checkbox\", id: this.props.id, checked: this.props.checked || false, value: this.props.value, onChange: this.onChange, style: { display: \"none\" } }),\r\n            React.createElement(CheckboxLabel, { htmlFor: this.props.id },\r\n                React.createElement(CheckboxIconWrapper, null, this.props.checked ? React.createElement(CheckboxOnIcon, null) : React.createElement(CheckboxOffIcon, null)),\r\n                this.props.children)));\r\n    }\r\n}\r\n//# sourceMappingURL=Checkbox.js.map","import * as React from \"react\";\r\nimport styled from \"../../../../styled-components\";\r\nimport { Checkbox } from \"../../../Checkbox\";\r\nimport { SelectBox } from \"../../../SelectBox\";\r\nimport { AddIcon } from \"../../../../icon/AddIcon\";\r\nconst ColumnSelectorIconWrapper = styled.div `\n    color: ${({ theme }) => theme.colors.gridColumnSelector};\n`;\r\nexport class GridColumnSelector extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onCheckboxChange = (_e, checked, name, _value) => {\r\n            this.props.onChange(name, checked);\r\n        };\r\n    }\r\n    render() {\r\n        let shownItems = this.props.fields.filter((f) => !f.alwaysVisible);\r\n        if (shownItems.length === 0) {\r\n            return null;\r\n        }\r\n        return (React.createElement(\"div\", { style: { padding: \"4px\" } },\r\n            React.createElement(SelectBox, { offset: { left: -21, top: -45 }, render: () => shownItems.map((f) => {\r\n                    return React.createElement(Checkbox, { id: \"column_\" + f.fieldKey, key: f.fieldKey, name: f.fieldKey, value: f.fieldKey, checked: f.selected, onChange: this.onCheckboxChange }, f.label);\r\n                }) },\r\n                React.createElement(ColumnSelectorIconWrapper, null,\r\n                    React.createElement(AddIcon, null)))));\r\n    }\r\n}\r\n//# sourceMappingURL=GridColumnSelector.js.map","import * as React from \"react\";\r\nimport styled from \"../../../../styled-components\";\r\nimport { GridColumnSelector } from \"./GridColumnSelector\";\r\nconst HeaderSpacer = styled.div `\n    height: 32px;\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\n    background-color: ${props => props.theme.colors.gridEvenRowBg};\n    display: flex;\n`;\r\nconst HeaderSpacerLeft = styled(HeaderSpacer) ``;\r\nconst HeaderSpacerRight = styled(HeaderSpacer) `\n    justify-content: flex-end;\n`;\r\nconst HeaderVertBorder = styled.div `\n    background-color: ${props => props.theme.colors.gridBorder};\n    height: 100%;\n    align-self: end;\n`;\r\nexport class GridHeader extends React.PureComponent {\r\n    render() {\r\n        const propsChildren = React.Children.toArray(this.props.children);\r\n        const resultChildren = propsChildren.reduce((acc, c, i) => {\r\n            acc.push(React.createElement(\"span\", { key: -i - 1 }, c));\r\n            if (i !== propsChildren.length - 1) {\r\n                acc.push(React.createElement(HeaderVertBorder, { key: i + 1 }));\r\n            }\r\n            return acc;\r\n        }, [\r\n            React.createElement(HeaderSpacerLeft, { key: 0 },\r\n                React.createElement(GridColumnSelector, { onChange: (key, checked) => {\r\n                        this.props.onFieldsChange(key, checked);\r\n                    }, fields: this.props.fields }),\r\n                this.props.extraElements && this.props.extraElements.left)\r\n        ]);\r\n        resultChildren.push(React.createElement(HeaderSpacerRight, { key: propsChildren.length + 1 }, this.props.extraElements && this.props.extraElements.right));\r\n        return resultChildren;\r\n    }\r\n}\r\n//# sourceMappingURL=GridHeader.js.map","import * as React from \"react\";\r\nimport styled from \"../../../styled-components\";\r\nconst GRID_CELL_PADDING_X = 32;\r\nconst Spacer = styled(\"div\") `\r\n    height: 32px;\r\n    background-color: ${({ odd, theme }) => odd ? theme.colors.gridOddRowBg : theme.colors.gridEvenRowBg};\r\n`;\r\nconst Item = styled(\"div\") `\r\n    height: 32px;\r\n    padding: 0 ${GRID_CELL_PADDING_X}px;\r\n    background-color: ${({ odd, theme }) => odd ? theme.colors.gridOddRowBg : theme.colors.gridEvenRowBg};\r\n`;\r\nconst VertBorder = styled.div `\r\n    background-color: ${props => props.theme.colors.gridBorder};\r\n`;\r\nexport class GridRow extends React.PureComponent {\r\n    render() {\r\n        const propsChildren = React.Children.toArray(this.props.children);\r\n        const resultChildren = propsChildren.reduce((acc, c, i) => {\r\n            acc.push(React.createElement(Item, { odd: this.props.odd, key: -i - 1 }, c));\r\n            if (i !== propsChildren.length - 1) {\r\n                acc.push(React.createElement(VertBorder, { key: i + 1 }));\r\n            }\r\n            return acc;\r\n        }, [\r\n            React.createElement(Spacer, { odd: this.props.odd, key: 0 })\r\n        ]);\r\n        resultChildren.push(React.createElement(Spacer, { odd: this.props.odd, key: propsChildren.length + 1 }));\r\n        return resultChildren;\r\n    }\r\n}\r\n//# sourceMappingURL=GridRow.js.map","import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport styled, { css } from \"../../../../styled-components\";\r\nimport { Label } from \"../../../../data/Label\";\r\nimport { GridSortingOrder } from \"../../state/GridSortingOrder\";\r\nimport { observer } from \"mobx-react\";\r\nconst GridHeaderHitBox = styled.div `\r\n`;\r\nconst HeaderItem = styled(\"div\") `\r\n    background: ${props => props.theme.colors.gridEvenRowBg};\r\n    height: 32px;\r\n    padding: 0 8px 0 32px;\r\n    /* padding-right: 36px; */\r\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\r\n    cursor: ${props => props.isSortable ? \"pointer\" : \"default\"};\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    ${props => props.isSortable ? css `\r\n        & ${Label} {\r\n            padding: 0;\r\n            ${GridHeaderHitBox}:hover & {\r\n                color: ${props.theme.colors.gridHeaderHover};\r\n            }\r\n        }\r\n    ` : css `\r\n        & ${Label} {\r\n            padding: 0;\r\n        }\r\n    `}\r\n`;\r\nconst ArrowDown = styled.div `\r\n    border-top: 5px solid ${props => props.theme.colors.selectBoxArrow};\r\n    border-left: 5px solid transparent;\r\n    border-right: 5px solid transparent;\r\n    margin: 0 7px;\r\n    ${GridHeaderHitBox}:hover & {\r\n        border-top-color: ${props => props.theme.colors.gridHeaderHover};;\r\n    }\r\n`;\r\nconst ArrowUp = styled.div `\r\n    border-bottom: 5px solid ${props => props.theme.colors.selectBoxArrow};\r\n    border-left: 5px solid transparent;\r\n    border-right: 5px solid transparent;\r\n    margin: 0 7px;\r\n    ${GridHeaderHitBox}:hover & {\r\n        border-bottom-color: ${props => props.theme.colors.gridHeaderHover};;\r\n    }\r\n`;\r\nconst NoArrow = styled.div `\r\n    width: 24px;\r\n`;\r\nlet GridHeaderItem = class GridHeaderItem extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.onClick = () => {\r\n            if (this.props.onClick) {\r\n                this.props.onClick(this.props.field);\r\n            }\r\n        };\r\n    }\r\n    render() {\r\n        return (React.createElement(GridHeaderHitBox, null,\r\n            React.createElement(HeaderItem, { onClick: this.onClick, isSortable: this.props.field.isSortable },\r\n                React.createElement(Label, null, this.props.children),\r\n                this.getHeaderSortArrow())));\r\n    }\r\n    getHeaderSortArrow() {\r\n        if (!this.props.sortingOptions || this.props.sortingOptions.field !== this.props.field) {\r\n            return React.createElement(NoArrow, null);\r\n        }\r\n        if (this.props.sortingOptions.order === GridSortingOrder.Ascending) {\r\n            return React.createElement(ArrowUp, null);\r\n        }\r\n        if (this.props.sortingOptions.order === GridSortingOrder.Descending) {\r\n            return React.createElement(ArrowDown, null);\r\n        }\r\n        return React.createElement(NoArrow, null);\r\n    }\r\n};\r\nGridHeaderItem = tslib_1.__decorate([\r\n    observer\r\n], GridHeaderItem);\r\nexport { GridHeaderItem };\r\n//# sourceMappingURL=GridHeaderItem.js.map","import * as React from \"react\";\r\nimport styled from \"../../../styled-components\";\r\nconst Wrapper = styled.div `\r\n    border-top: 1px solid ${props => props.theme.colors.gridBorder};\r\n    border-bottom: 1px solid ${props => props.theme.colors.gridBorder};\r\n`;\r\nexport const GridWrapper = ({ children }) => (React.createElement(Wrapper, null, children));\r\n//# sourceMappingURL=GridWrapper.js.map","import styled from \"../../../styled-components\";\r\nexport const GridData = styled(\"div\") `\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: ${({ dataType }) => dataType === \"number\" ? \"flex-end\" : \"auto\"};\r\n`;\r\n//# sourceMappingURL=GridData.js.map","import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport styled from \"../../styled-components\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable } from \"mobx\";\r\nimport { GridLayout } from \"./internal/GridLayout\";\r\nimport { GridSortingOrder } from \"./state/GridSortingOrder\";\r\nimport { GridHeader } from \"./internal/header/GridHeader\";\r\nimport { GridRow } from \"./internal/GridRow\";\r\nimport { GridHeaderItem } from \"./internal/header/GridHeaderItem\";\r\nimport { GridWrapper } from \"./internal/GridWrapper\";\r\nimport { GridData } from \"./internal/GridData\";\r\nconst LoadMoreRows = styled.div `\n    text-align: center;\n    font-size: 14px;\n    font-weight: 500;\n    padding: 8px;\n    cursor: pointer;\n`;\r\nconst NoRowsAvailable = styled.div `\n    text-align: center;\n    font-size: 14px;\n    font-weight: 500;\n    padding: 8px;\n`;\r\nlet Grid = class Grid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.dataItemRenderer = (f, row) => {\r\n            if (f.renderer) {\r\n                return (React.createElement(GridData, { key: f.fieldKey, dataType: f.type }, typeof f.renderer === \"function\" ?\r\n                    f.renderer(row.data) :\r\n                    f.renderer.render(row.data)));\r\n            }\r\n            let data = f.getFieldValue(row.data).toString();\r\n            return (React.createElement(GridData, { key: f.fieldKey, dataType: f.type }, data));\r\n        };\r\n        this.changeSorting = (field) => {\r\n            if (this.props.sortingOptions.field !== field) {\r\n                this.props.sortingOptions.setAscendingOrder();\r\n            }\r\n            else {\r\n                this.props.sortingOptions.setNextOrder();\r\n            }\r\n            if (field !== undefined) {\r\n                this.props.sortingOptions.field = field;\r\n            }\r\n        };\r\n        this.setColumnSelect = (key, checked) => {\r\n            this.props.fields.setColumnSelect(key, checked);\r\n        };\r\n        this.loadMoreRows = () => {\r\n            if (this.visibleRows < this.props.rows.length) {\r\n                this.visibleRows += 50;\r\n            }\r\n        };\r\n        this.updateVisibleRows();\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.limitRows !== prevProps.limitRows || this.props.maxVisibleRows !== prevProps.maxVisibleRows) {\r\n            this.updateVisibleRows();\r\n        }\r\n    }\r\n    updateVisibleRows() {\r\n        this.visibleRows = this.props.limitRows ? this.props.maxVisibleRows : Number.POSITIVE_INFINITY;\r\n    }\r\n    render() {\r\n        const sortedRows = this.getSortedRows();\r\n        return (React.createElement(React.Fragment, null,\r\n            React.createElement(GridWrapper, null,\r\n                React.createElement(GridLayout, { numberOfFields: this.props.fields.selectedGridFields.length },\r\n                    React.createElement(GridHeader, { onFieldsChange: this.setColumnSelect, fields: this.props.fields.gridFields, extraElements: this.props.extraHeaderElements }, this.props.fields.selectedGridFields.map((f) => {\r\n                        return (React.createElement(GridHeaderItem, { key: f.fieldKey, field: f, onClick: f.isSortable ? this.changeSorting : undefined, sortingOptions: this.props.sortingOptions }, f.label));\r\n                    })),\r\n                    sortedRows.slice(0, this.visibleRows).map((row, idx) => {\r\n                        return (React.createElement(GridRow, { odd: !(idx % 2), key: row.key }, this.props.fields.selectedGridFields.map((f) => {\r\n                            return this.dataItemRenderer(f, row);\r\n                        })));\r\n                    }))),\r\n            this.visibleRows < this.props.rows.length ?\r\n                React.createElement(LoadMoreRows, { onClick: this.loadMoreRows }, this.props.loadMoreText)\r\n                : null,\r\n            this.props.rows.length === 0 ?\r\n                React.createElement(NoRowsAvailable, null, this.props.noDataText)\r\n                : null));\r\n    }\r\n    getSortedRows() {\r\n        const sortOpts = this.props.sortingOptions;\r\n        if (sortOpts.field === undefined ||\r\n            sortOpts.order === GridSortingOrder.Default) {\r\n            return this.props.rows;\r\n        }\r\n        return [...this.props.rows].sort((a, b) => {\r\n            if (sortOpts.field === undefined ||\r\n                sortOpts.order === GridSortingOrder.Default) {\r\n                return -1;\r\n            }\r\n            const aValue = sortOpts.field.getFieldValue(a.data);\r\n            const bValue = sortOpts.field.getFieldValue(b.data);\r\n            const compResult = typeof aValue !== \"string\" && typeof aValue !== \"number\" ?\r\n                aValue.comparedTo(bValue) :\r\n                this.defaultComparator(aValue, bValue);\r\n            if (sortOpts.order === GridSortingOrder.Ascending) {\r\n                return compResult;\r\n            }\r\n            else {\r\n                return compResult * -1;\r\n            }\r\n        });\r\n    }\r\n    defaultComparator(a, b) {\r\n        if (a === b) {\r\n            return 0;\r\n        }\r\n        if (a < b) {\r\n            return -1;\r\n        }\r\n        return 1;\r\n    }\r\n};\r\nGrid.defaultProps = {\r\n    maxVisibleRows: 50,\r\n    limitRows: true\r\n};\r\ntslib_1.__decorate([\r\n    observable\r\n], Grid.prototype, \"visibleRows\", void 0);\r\nGrid = tslib_1.__decorate([\r\n    observer\r\n], Grid);\r\nexport { Grid };\r\n//# sourceMappingURL=Grid.js.map","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { splitLongHash } from \"../util/internal/hash\";\r\nconst HiddenHashPartWrapper = styled.span `\r\n    &:before {\r\n        content: \" ... \";\r\n    }\r\n`;\r\nconst HiddenHashPart = styled.strong `\r\n    display: inline-block;\r\n    width: 0;\r\n    height: 0;\r\n    opacity: 0;\r\n    pointer-events: none;\r\n    font-size: 0;\r\n`;\r\nexport class Hash extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.handleCopy = (e) => {\r\n            e.preventDefault();\r\n            e.clipboardData.setData(\"text/plain\", \"0x\" + this.props.children);\r\n        };\r\n    }\r\n    render() {\r\n        let { children } = this.props;\r\n        let hash = \"0x\" + children.replace(/^0x/, \"\");\r\n        let chars = this.props.ellipsisChars;\r\n        let hashParts = splitLongHash(hash, this.props.ellipsisThreshold, chars);\r\n        return React.createElement(\"span\", { onCopy: this.handleCopy }, !this.props.useEllipsis || !hashParts ?\r\n            hash :\r\n            React.createElement(React.Fragment, null,\r\n                hashParts[0],\r\n                React.createElement(HiddenHashPartWrapper, null,\r\n                    React.createElement(HiddenHashPart, null, hashParts[1])),\r\n                hashParts[2]));\r\n    }\r\n}\r\nHash.defaultProps = {\r\n    ellipsisThreshold: 20,\r\n    ellipsisChars: 6,\r\n    useEllipsis: true\r\n};\r\n//# sourceMappingURL=Hash.js.map","import styled, { css } from \"../styled-components\";\r\nimport * as React from \"react\";\r\nconst $Label = ({ children, className }) => (React.createElement(\"div\", { className: className }, children));\r\nexport const Label = styled($Label) `\n    font-size: 12px;\n    line-height: 12px;\n    height: 12px;\n    text-transform: uppercase;\n    background-color: ${props => (props.arrow ?\r\n    (props.disabled ? props.theme.colors.label.disabled : props.theme.colors.base.highlight.color) :\r\n    \"transparent\")};\n    font-weight: 600;\n    letter-spacing: .5px;\n    padding: 4px 8px;\n    margin-right: ${props => props.arrow ? \"10px\" : \"0\"};\n    color: ${props => (props.arrow ?\r\n    props.theme.colors.base.highlight.contrast :\r\n    props.strong ?\r\n        (props.disabled ? props.theme.colors.label.disabled : props.theme.colors.label.strong) :\r\n        props.disabled ? props.theme.colors.label.disabled : props.theme.colors.label.default)};\n\n    /**\n     * When is the first label in a row the width of the container (LayoutRowItemWrapper) is 200px + 2*8px padding,\n     * and the display: flex along with justify-content: flex-end ensures that the label is right aligned.\n     * However, if the label is long enough (bigger than 200px) to wrap, the Label div will occupy all the container\n     * width, and the text will be aligned to right thanks to the rule below.\n     */\n    text-align: right;\n\n    ${props => props.arrow ? css `\n    position: relative;\n    &::before {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        right: -10px;\n        border-top: 10px solid transparent;\n        border-bottom: 10px solid transparent;\n        border-left: 10px solid ${props.disabled ?\r\n    props.theme.colors.label.disabled :\r\n    props.theme.colors.base.highlight.color};\n        transform: scaleX(.8);\n        transform-origin: center left;\n    }\n    ` : \"\"}\n`;\r\n//# sourceMappingURL=Label.js.map","export var GridSortingOrder;\r\n(function (GridSortingOrder) {\r\n    GridSortingOrder[GridSortingOrder[\"Ascending\"] = 0] = \"Ascending\";\r\n    GridSortingOrder[GridSortingOrder[\"Descending\"] = 1] = \"Descending\";\r\n    GridSortingOrder[GridSortingOrder[\"Default\"] = 2] = \"Default\";\r\n})(GridSortingOrder || (GridSortingOrder = {}));\r\n//# sourceMappingURL=GridSortingOrder.js.map","import * as React from \"react\";\r\nimport styled from \"../styled-components\";\r\nimport { CloseSmallIcon } from \"../icon/CloseSmallIcon\";\r\nconst CloseButton = styled.div `\r\n    cursor: pointer;\r\n    line-height: 1;\r\n    color: ${({ theme }) => theme.colors.closeBtn};\r\n`;\r\nconst ModalSelectBoxWrapper = styled.div `\r\n    padding: 16px;\r\n    border-radius: 8px;\r\n    background-color: ${props => props.theme.colors.overlayBg};\r\n    border: 1px solid #D0DEF2;\r\n    box-shadow: 0 2px 4px 0 rgba(51,69,100,0.07), 0 6px 16px 0 rgba(51,69,100,0.08);\r\n`;\r\nexport class ModalSelectBox extends React.Component {\r\n    render() {\r\n        return (React.createElement(ModalSelectBoxWrapper, null,\r\n            React.createElement(\"div\", { style: { padding: \"4px\" } },\r\n                React.createElement(CloseButton, { onClick: this.props.onClose },\r\n                    React.createElement(CloseSmallIcon, null))),\r\n            this.props.children));\r\n    }\r\n}\r\n//# sourceMappingURL=ModalSelectBox.js.map","import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport styled from \"../styled-components\";\r\nimport { Manager, Reference, Popper } from \"react-popper\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable } from \"mobx\";\r\nimport { ModalSelectBox } from \"./ModalSelectBox\";\r\nconst Overlay = styled.div `\r\n    position: fixed;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n`;\r\nlet SelectBox = class SelectBox extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.isOpened = false;\r\n        this.openSelectBox = () => {\r\n            this.isOpened = true;\r\n        };\r\n        this.closeSelectBox = () => {\r\n            this.isOpened = false;\r\n        };\r\n    }\r\n    render() {\r\n        let { disabled } = this.props;\r\n        return (React.createElement(Manager, null,\r\n            React.createElement(Reference, null, ({ ref }) => React.createElement(\"div\", { ref: ref, onClick: !disabled ? this.openSelectBox : void 0, style: {\r\n                    cursor: !disabled ? \"pointer\" : \"default\"\r\n                } }, this.props.children)),\r\n            this.isOpened ?\r\n                ReactDOM.createPortal(React.createElement(React.Fragment, null,\r\n                    React.createElement(Overlay, { onClick: this.closeSelectBox }),\r\n                    React.createElement(Popper, { modifiers: {\r\n                            offset: {\r\n                                offset: this.props.offset ?\r\n                                    this.props.offset.left + \"px, \" + this.props.offset.top + \"px\" :\r\n                                    \"auto\"\r\n                            },\r\n                            flip: {\r\n                                enabled: false\r\n                            },\r\n                            preventOverflow: {\r\n                                enabled: true\r\n                            },\r\n                            hide: {\r\n                                enabled: false\r\n                            }\r\n                        }, placement: \"bottom-start\" }, ({ ref, placement, style }) => (React.createElement(\"div\", { ref: ref, \"data-placement\": placement, style: style },\r\n                        React.createElement(ModalSelectBox, { onClose: this.closeSelectBox }, this.props.render({ requestClose: this.closeSelectBox })))))), document.body)\r\n                : null));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    observable\r\n], SelectBox.prototype, \"isOpened\", void 0);\r\nSelectBox = tslib_1.__decorate([\r\n    observer\r\n], SelectBox);\r\nexport { SelectBox };\r\n//# sourceMappingURL=SelectBox.js.map"],"mappings":"AAAA;;;ACIA;;;;ACFA;;;ACMA;;;;;;AAMA;AAEA;;;;AAIA;AAEA;AChBA;AAEA;;ACHA;AACA;;AAGA;;AAIA;AACA;;;AAIA;;ACbA;AAEA;;AALA;AAQA;AAEA;AACA;AAEA;ACPA;AACA;;;;AAIA;AACA;;;;;AAKA;AACA;;AAEA;AACA;;;AAGA;AACA;;;;AAKA;AACA;;;;AAIA;AACA;;AAGA;AACA;;;;AAIA;AACA;;AAGA;;AAGA;AClDA;AACA;AAEA;;;;ACDA;ACLA;;;;;;AAmBA;;;;;AAMA;;;;ACjBA;;;;;;;AAQA;;;;;ACRA;;;;AAMA;AACA;AACA;;;;;;;;;AAaA;;;;;;;;;AASA;;;;AAMA;AC5CA;;;ACMA;AAEA;;;AAGA;;;AAIA;;;;;;ACAA","sourceRoot":""}